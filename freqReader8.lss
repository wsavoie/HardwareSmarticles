
freqReader8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000013c4  00001458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003c  0080006e  0080006e  00001466  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00001466  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000004ea  00000000  00000000  00001486  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013a3  00000000  00000000  00001970  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004e6  00000000  00000000  00002d13  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cb2  00000000  00000000  000031f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000250  00000000  00000000  00003eac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a08  00000000  00000000  000040fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a9c  00000000  00000000  00004b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000055a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__dtors_end>
       2:	3d c0       	rjmp	.+122    	; 0x7e <__bad_interrupt>
       4:	3c c0       	rjmp	.+120    	; 0x7e <__bad_interrupt>
       6:	1c c1       	rjmp	.+568    	; 0x240 <__vector_3>
       8:	3a c0       	rjmp	.+116    	; 0x7e <__bad_interrupt>
       a:	39 c0       	rjmp	.+114    	; 0x7e <__bad_interrupt>
       c:	38 c0       	rjmp	.+112    	; 0x7e <__bad_interrupt>
       e:	37 c0       	rjmp	.+110    	; 0x7e <__bad_interrupt>
      10:	36 c0       	rjmp	.+108    	; 0x7e <__bad_interrupt>
      12:	35 c0       	rjmp	.+106    	; 0x7e <__bad_interrupt>
      14:	34 c0       	rjmp	.+104    	; 0x7e <__bad_interrupt>
      16:	33 c0       	rjmp	.+102    	; 0x7e <__bad_interrupt>
      18:	32 c0       	rjmp	.+100    	; 0x7e <__bad_interrupt>
      1a:	31 c0       	rjmp	.+98     	; 0x7e <__bad_interrupt>
      1c:	30 c0       	rjmp	.+96     	; 0x7e <__bad_interrupt>
      1e:	e5 c3       	rjmp	.+1994   	; 0x7ea <_Z10moveMotor2h+0x12>
      20:	ee c3       	rjmp	.+2012   	; 0x7fe <_Z10moveMotor2h+0x26>
      22:	f7 c3       	rjmp	.+2030   	; 0x812 <_Z10moveMotor2h+0x3a>
      24:	00 c4       	rjmp	.+2048   	; 0x826 <_Z10moveMotor2h+0x4e>
      26:	09 c4       	rjmp	.+2066   	; 0x83a <_Z10moveMotor2h+0x62>
      28:	0d c4       	rjmp	.+2074   	; 0x844 <_Z10moveMotor2h+0x6c>
      2a:	16 c4       	rjmp	.+2092   	; 0x858 <_Z10moveMotor2h+0x80>
      2c:	a8 c4       	rjmp	.+2384   	; 0x97e <_Z10moveMotor2h+0x1a6>
      2e:	44 c5       	rjmp	.+2696   	; 0xab8 <_Z10moveMotor2h+0x2e0>

00000030 <__ctors_start>:
      30:	a7 07       	cpc	r26, r23

00000032 <__ctors_end>:
      32:	ad 07       	cpc	r26, r29

00000034 <__dtors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf e5       	ldi	r28, 0x5F	; 95
      3a:	d2 e0       	ldi	r29, 0x02	; 2
      3c:	de bf       	out	0x3e, r29	; 62
      3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
      40:	10 e0       	ldi	r17, 0x00	; 0
      42:	a0 e6       	ldi	r26, 0x60	; 96
      44:	b0 e0       	ldi	r27, 0x00	; 0
      46:	e4 ec       	ldi	r30, 0xC4	; 196
      48:	f3 e1       	ldi	r31, 0x13	; 19
      4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
      50:	ae 36       	cpi	r26, 0x6E	; 110
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>

00000056 <__do_clear_bss>:
      56:	10 e0       	ldi	r17, 0x00	; 0
      58:	ae e6       	ldi	r26, 0x6E	; 110
      5a:	b0 e0       	ldi	r27, 0x00	; 0
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	aa 3a       	cpi	r26, 0xAA	; 170
      62:	b1 07       	cpc	r27, r17
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>

00000066 <__do_global_ctors>:
      66:	10 e0       	ldi	r17, 0x00	; 0
      68:	c2 e3       	ldi	r28, 0x32	; 50
      6a:	d0 e0       	ldi	r29, 0x00	; 0
      6c:	03 c0       	rjmp	.+6      	; 0x74 <.do_global_ctors_start>

0000006e <.do_global_ctors_loop>:
      6e:	22 97       	sbiw	r28, 0x02	; 2
      70:	fe 01       	movw	r30, r28
      72:	98 d9       	rcall	.-3280   	; 0xfffff3a4 <__eeprom_end+0xff7ef3a4>

00000074 <.do_global_ctors_start>:
      74:	c0 33       	cpi	r28, 0x30	; 48
      76:	d1 07       	cpc	r29, r17
      78:	d1 f7       	brne	.-12     	; 0x6e <.do_global_ctors_loop>
      7a:	d9 d5       	rcall	.+2994   	; 0xc2e <main>
      7c:	97 c9       	rjmp	.-3282   	; 0xfffff3ac <__eeprom_end+0xff7ef3ac>

0000007e <__bad_interrupt>:
      7e:	c0 cf       	rjmp	.-128    	; 0x0 <__vectors>

00000080 <_ZN14ServoSequencer15deregisterServoEh>:
// RETURNS:     Nothing
//=============================================================================
void ServoSequencer::deregisterServo(uint8_t servoSlotNumber)
{
    //make sure we got a valid slot number
    if(servoSlotNumber < kMaxNumberOfServosSupported)
      80:	85 30       	cpi	r24, 0x05	; 5
      82:	78 f4       	brcc	.+30     	; 0xa2 <_ZN14ServoSequencer15deregisterServoEh+0x22>
    {
        servoRegistry[servoSlotNumber].enabled      = false;
      84:	e8 2f       	mov	r30, r24
      86:	f0 e0       	ldi	r31, 0x00	; 0
      88:	ee 0f       	add	r30, r30
      8a:	ff 1f       	adc	r31, r31
      8c:	ee 0f       	add	r30, r30
      8e:	ff 1f       	adc	r31, r31
      90:	df 01       	movw	r26, r30
      92:	ad 58       	subi	r26, 0x8D	; 141
      94:	bf 4f       	sbci	r27, 0xFF	; 255
      96:	1c 92       	st	X, r1
        servoRegistry[servoSlotNumber].slotOccupied = false;
      98:	ef 58       	subi	r30, 0x8F	; 143
      9a:	ff 4f       	sbci	r31, 0xFF	; 255
      9c:	13 82       	std	Z+3, r1	; 0x03
		servoRegistry[servoSlotNumber].pulseLengthInTicks = 128; //restore the pulse length to the default setting.
      9e:	80 e8       	ldi	r24, 0x80	; 128
      a0:	80 83       	st	Z, r24
      a2:	08 95       	ret

000000a4 <_ZN14ServoSequencer19setServoPulseLengthEhj>:
// RETURNS:     Nothing
//=============================================================================
void ServoSequencer::setServoPulseLength(uint8_t servoNumber, uint16_t newLengthInMicroseconds)
{
    //make sure we got a valid slot number and the slot is registered to a servo
    if( (servoNumber < kMaxNumberOfServosSupported      ) &&
      a4:	85 30       	cpi	r24, 0x05	; 5
      a6:	b8 f4       	brcc	.+46     	; 0xd6 <_ZN14ServoSequencer19setServoPulseLengthEhj+0x32>
      a8:	e8 2f       	mov	r30, r24
      aa:	f0 e0       	ldi	r31, 0x00	; 0
      ac:	ee 0f       	add	r30, r30
      ae:	ff 1f       	adc	r31, r31
      b0:	ee 0f       	add	r30, r30
      b2:	ff 1f       	adc	r31, r31
      b4:	ef 58       	subi	r30, 0x8F	; 143
      b6:	ff 4f       	sbci	r31, 0xFF	; 255
      b8:	83 81       	ldd	r24, Z+3	; 0x03
      ba:	88 23       	and	r24, r24
      bc:	61 f0       	breq	.+24     	; 0xd6 <_ZN14ServoSequencer19setServoPulseLengthEhj+0x32>
        (servoRegistry[servoNumber].slotOccupied == true)   )
    {
        //Convert the servo pulse length into timer ticks.
        //Each timer tick is 8 microseconds.
        int16_t newLengthInClockTicks = newLengthInMicroseconds / 8;
      be:	23 e0       	ldi	r18, 0x03	; 3
      c0:	76 95       	lsr	r23
      c2:	67 95       	ror	r22
      c4:	2a 95       	dec	r18
      c6:	e1 f7       	brne	.-8      	; 0xc0 <_ZN14ServoSequencer19setServoPulseLengthEhj+0x1c>
        //subtract the pulse offset
        newLengthInClockTicks -= 64;
      c8:	60 54       	subi	r22, 0x40	; 64
      ca:	70 40       	sbci	r23, 0x00	; 0

        //make sure the length of this pulse is within the acceptable range
        if( (newLengthInClockTicks > -1) && (newLengthInClockTicks < 256) )
      cc:	6f 3f       	cpi	r22, 0xFF	; 255
      ce:	71 05       	cpc	r23, r1
      d0:	09 f0       	breq	.+2      	; 0xd4 <_ZN14ServoSequencer19setServoPulseLengthEhj+0x30>
      d2:	08 f4       	brcc	.+2      	; 0xd6 <_ZN14ServoSequencer19setServoPulseLengthEhj+0x32>
        {
            servoRegistry[servoNumber].pulseLengthInTicks = static_cast<uint8_t>(newLengthInClockTicks);
      d4:	60 83       	st	Z, r22
      d6:	08 95       	ret

000000d8 <_ZN14ServoSequencer19getServoPulseLengthEh>:
uint16_t ServoSequencer::getServoPulseLength(uint8_t servoNumber)
{
    uint16_t pulseLength = 0;

    //make sure we got a valid slot number and the slot is registered to a servo
    if( (servoNumber < kMaxNumberOfServosSupported      ) &&
      d8:	85 30       	cpi	r24, 0x05	; 5
      da:	b0 f4       	brcc	.+44     	; 0x108 <_ZN14ServoSequencer19getServoPulseLengthEh+0x30>
      dc:	e8 2f       	mov	r30, r24
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	ee 0f       	add	r30, r30
      e2:	ff 1f       	adc	r31, r31
      e4:	ee 0f       	add	r30, r30
      e6:	ff 1f       	adc	r31, r31
      e8:	ef 58       	subi	r30, 0x8F	; 143
      ea:	ff 4f       	sbci	r31, 0xFF	; 255
      ec:	83 81       	ldd	r24, Z+3	; 0x03
      ee:	88 23       	and	r24, r24
      f0:	59 f0       	breq	.+22     	; 0x108 <_ZN14ServoSequencer19getServoPulseLengthEh+0x30>
        (servoRegistry[servoNumber].slotOccupied == true)   )
    {
        pulseLength = (servoRegistry[servoNumber].pulseLengthInTicks * 8) + 64;
      f2:	80 81       	ld	r24, Z
      f4:	28 2f       	mov	r18, r24
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	28 5f       	subi	r18, 0xF8	; 248
      fa:	3f 4f       	sbci	r19, 0xFF	; 255
      fc:	43 e0       	ldi	r20, 0x03	; 3
      fe:	22 0f       	add	r18, r18
     100:	33 1f       	adc	r19, r19
     102:	4a 95       	dec	r20
     104:	e1 f7       	brne	.-8      	; 0xfe <_ZN14ServoSequencer19getServoPulseLengthEh+0x26>
     106:	02 c0       	rjmp	.+4      	; 0x10c <_ZN14ServoSequencer19getServoPulseLengthEh+0x34>
     108:	20 e0       	ldi	r18, 0x00	; 0
     10a:	30 e0       	ldi	r19, 0x00	; 0
    {
        //Servo number is out of range or is not allocate to a servo. Do nothing.
    }

    return pulseLength;
}//end getServoPulseLength
     10c:	c9 01       	movw	r24, r18
     10e:	08 95       	ret

00000110 <_ZN14ServoSequencer11setServoPinEhh>:
//
//=============================================================================
void ServoSequencer::setServoPin(uint8_t servoNumber, uint8_t newPin)
{
    //make sure we got a valid slot number and the slot is registered to a servo
    if( (servoNumber < kMaxNumberOfServosSupported      ) &&
     110:	85 30       	cpi	r24, 0x05	; 5
     112:	58 f4       	brcc	.+22     	; 0x12a <_ZN14ServoSequencer11setServoPinEhh+0x1a>
     114:	e8 2f       	mov	r30, r24
     116:	f0 e0       	ldi	r31, 0x00	; 0
     118:	ee 0f       	add	r30, r30
     11a:	ff 1f       	adc	r31, r31
     11c:	ee 0f       	add	r30, r30
     11e:	ff 1f       	adc	r31, r31
     120:	ef 58       	subi	r30, 0x8F	; 143
     122:	ff 4f       	sbci	r31, 0xFF	; 255
     124:	83 81       	ldd	r24, Z+3	; 0x03
     126:	81 11       	cpse	r24, r1
        (servoRegistry[servoNumber].slotOccupied == true)   )
    {

        servoRegistry[servoNumber].pin = newPin;
     128:	61 83       	std	Z+1, r22	; 0x01
     12a:	08 95       	ret

0000012c <_ZN14ServoSequencer9isEnabledEh>:
//
//=============================================================================
bool ServoSequencer::isEnabled(uint8_t servoNumber)
{
    //make sure we got a valid slot number and the slot is registered to a servo
    if( (servoNumber < kMaxNumberOfServosSupported      ) &&
     12c:	85 30       	cpi	r24, 0x05	; 5
     12e:	a0 f4       	brcc	.+40     	; 0x158 <_ZN14ServoSequencer9isEnabledEh+0x2c>
     130:	a8 2f       	mov	r26, r24
     132:	b0 e0       	ldi	r27, 0x00	; 0
     134:	fd 01       	movw	r30, r26
     136:	ee 0f       	add	r30, r30
     138:	ff 1f       	adc	r31, r31
     13a:	ee 0f       	add	r30, r30
     13c:	ff 1f       	adc	r31, r31
     13e:	ef 58       	subi	r30, 0x8F	; 143
     140:	ff 4f       	sbci	r31, 0xFF	; 255
     142:	83 81       	ldd	r24, Z+3	; 0x03
     144:	88 23       	and	r24, r24
     146:	41 f0       	breq	.+16     	; 0x158 <_ZN14ServoSequencer9isEnabledEh+0x2c>
        (servoRegistry[servoNumber].slotOccupied == true)   )
    {
        return servoRegistry[servoNumber].enabled;
     148:	aa 0f       	add	r26, r26
     14a:	bb 1f       	adc	r27, r27
     14c:	aa 0f       	add	r26, r26
     14e:	bb 1f       	adc	r27, r27
     150:	ad 58       	subi	r26, 0x8D	; 141
     152:	bf 4f       	sbci	r27, 0xFF	; 255
     154:	8c 91       	ld	r24, X
     156:	08 95       	ret
     158:	80 e0       	ldi	r24, 0x00	; 0
    {
        //Servo number is out of range or is not allocate to a servo.
        //So therefore it is not enabled.
        return false;
    }
}//end isEnabled
     15a:	08 95       	ret

0000015c <_ZN14ServoSequencer19setupTimerPrescalerEv>:
    #endif


    #ifdef USE_TIMER1
        //reset the Timer Counter Control Register to its reset value
        TCCR1 = 0;
     15c:	10 be       	out	0x30, r1	; 48

        #if F_CPU == 8000000L
            //set counter1 prescaler to 64
            //our F_CPU is 8mhz so this makes each timer tick be 8 microseconds long
            TCCR1 &= ~(1<< CS13); //clear
     15e:	80 b7       	in	r24, 0x30	; 48
     160:	87 7f       	andi	r24, 0xF7	; 247
     162:	80 bf       	out	0x30, r24	; 48
            TCCR1 |=  (1<< CS12); //set
     164:	80 b7       	in	r24, 0x30	; 48
     166:	84 60       	ori	r24, 0x04	; 4
     168:	80 bf       	out	0x30, r24	; 48
            TCCR1 |=  (1<< CS11); //set
     16a:	80 b7       	in	r24, 0x30	; 48
     16c:	82 60       	ori	r24, 0x02	; 2
     16e:	80 bf       	out	0x30, r24	; 48
            TCCR1 |=  (1<< CS10); //set
     170:	80 b7       	in	r24, 0x30	; 48
     172:	81 60       	ori	r24, 0x01	; 1
     174:	80 bf       	out	0x30, r24	; 48
        #else
            //unsupported clock speed
            //TODO: find a way to have the compiler stop compiling and bark at the user
        #endif
    #endif
}//end setupTimerPrescaler
     176:	08 95       	ret

00000178 <_ZN14ServoSequencer15servoTimerSetupEv>:
//
//=============================================================================
void ServoSequencer::servoTimerSetup()
{
    //set up the timer prescaler based on which timer was selected and our F_CPU clock
    setupTimerPrescaler();
     178:	f1 df       	rcall	.-30     	; 0x15c <_ZN14ServoSequencer19setupTimerPrescalerEv>

    // Enable Output Compare Match Interrupt
    TIMSK |= (1 << OCIEnx);
     17a:	89 b7       	in	r24, 0x39	; 57
     17c:	80 64       	ori	r24, 0x40	; 64
     17e:	89 bf       	out	0x39, r24	; 57

    //reset the counter to 0
    TCNTn  = 0;
     180:	1f bc       	out	0x2f, r1	; 47
    //set the compare value to any number larger than 0
    OCRnx = 255;
     182:	8f ef       	ldi	r24, 0xFF	; 255
     184:	8e bd       	out	0x2e, r24	; 46
    // Enable global interrupts
    sei();
     186:	78 94       	sei
    TIFR0 - Timer Interrupt Flag Register
    TIMSK - Timer Interrupt Mask Register
    TCCR0B Timer/Counter Control Register B
    */

}//end servoTimerSetup
     188:	08 95       	ret

0000018a <_ZN14ServoSequencer18enableDisableServoEhb>:
//                                     false to disable the servo slot
//
// RETURNS:     Nothing
//
//=============================================================================
void ServoSequencer::enableDisableServo(uint8_t servoNumber, bool servoShouldBeEnabled)
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
{
    //make sure we got a valid slot number and the slot is registered to a servo
    if( (servoNumber < kMaxNumberOfServosSupported      ) &&
     18e:	85 30       	cpi	r24, 0x05	; 5
     190:	30 f5       	brcc	.+76     	; 0x1de <_ZN14ServoSequencer18enableDisableServoEhb+0x54>
     192:	c8 2f       	mov	r28, r24
     194:	d0 e0       	ldi	r29, 0x00	; 0
     196:	fe 01       	movw	r30, r28
     198:	ee 0f       	add	r30, r30
     19a:	ff 1f       	adc	r31, r31
     19c:	ee 0f       	add	r30, r30
     19e:	ff 1f       	adc	r31, r31
     1a0:	ef 58       	subi	r30, 0x8F	; 143
     1a2:	ff 4f       	sbci	r31, 0xFF	; 255
     1a4:	83 81       	ldd	r24, Z+3	; 0x03
     1a6:	88 23       	and	r24, r24
     1a8:	d1 f0       	breq	.+52     	; 0x1de <_ZN14ServoSequencer18enableDisableServoEhb+0x54>
        (servoRegistry[servoNumber].slotOccupied == true)   )
    {
        if(servoShouldBeEnabled == true)
     1aa:	66 23       	and	r22, r22
     1ac:	89 f0       	breq	.+34     	; 0x1d0 <_ZN14ServoSequencer18enableDisableServoEhb+0x46>
        {
            //if this is the very first servo we are enabling then configure the servo timer
            if( timerIsSetup == false)
     1ae:	80 91 6e 00 	lds	r24, 0x006E
     1b2:	88 23       	and	r24, r24
     1b4:	21 f4       	brne	.+8      	; 0x1be <_ZN14ServoSequencer18enableDisableServoEhb+0x34>
            {
                servoTimerSetup();
     1b6:	e0 df       	rcall	.-64     	; 0x178 <_ZN14ServoSequencer15servoTimerSetupEv>
                timerIsSetup = true;
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	80 93 6e 00 	sts	0x006E, r24
                //which typically configure all the timers to their liking on start up.
                //Configuring our timer late allows us to overwrite these settings.
            }

            //enable the servo. Its pulse will now be outputed on its pin.
            servoRegistry[servoNumber].enabled = true;
     1be:	cc 0f       	add	r28, r28
     1c0:	dd 1f       	adc	r29, r29
     1c2:	cc 0f       	add	r28, r28
     1c4:	dd 1f       	adc	r29, r29
     1c6:	cd 58       	subi	r28, 0x8D	; 141
     1c8:	df 4f       	sbci	r29, 0xFF	; 255
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	88 83       	st	Y, r24
     1ce:	07 c0       	rjmp	.+14     	; 0x1de <_ZN14ServoSequencer18enableDisableServoEhb+0x54>
        }
        else
        {
            //disable the servo. Its pulse will cease to be generated.
            servoRegistry[servoNumber].enabled = false;
     1d0:	cc 0f       	add	r28, r28
     1d2:	dd 1f       	adc	r29, r29
     1d4:	cc 0f       	add	r28, r28
     1d6:	dd 1f       	adc	r29, r29
     1d8:	cd 58       	subi	r28, 0x8D	; 141
     1da:	df 4f       	sbci	r29, 0xFF	; 255
     1dc:	18 82       	st	Y, r1
    }
    else
    {
        //Servo number is out of range or is not allocate to a servo. Do nothing.
    }
}//end enableDisableServo
     1de:	df 91       	pop	r29
     1e0:	cf 91       	pop	r28
     1e2:	08 95       	ret

000001e4 <_ZN14ServoSequencer14initServoArrayEv>:
// INPUT:       Nothing
//
// RETURNS:     Nothing
//
//=============================================================================
void ServoSequencer::initServoArray()
     1e4:	e1 e7       	ldi	r30, 0x71	; 113
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
{
    //init the Servo Registry array
    for(uint8_t i = 0; i < kMaxNumberOfServosSupported; ++i)
    {
        servoRegistry[i].pulseLengthInTicks = 128;
     1e8:	80 e8       	ldi	r24, 0x80	; 128
     1ea:	80 83       	st	Z, r24
        servoRegistry[i].pin = 0;
     1ec:	11 82       	std	Z+1, r1	; 0x01
        servoRegistry[i].enabled = false;
     1ee:	12 82       	std	Z+2, r1	; 0x02
        servoRegistry[i].slotOccupied = false;
     1f0:	13 82       	std	Z+3, r1	; 0x03
     1f2:	34 96       	adiw	r30, 0x04	; 4
//
//=============================================================================
void ServoSequencer::initServoArray()
{
    //init the Servo Registry array
    for(uint8_t i = 0; i < kMaxNumberOfServosSupported; ++i)
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	e5 38       	cpi	r30, 0x85	; 133
     1f8:	f9 07       	cpc	r31, r25
     1fa:	b9 f7       	brne	.-18     	; 0x1ea <_ZN14ServoSequencer14initServoArrayEv+0x6>
        servoRegistry[i].pin = 0;
        servoRegistry[i].enabled = false;
        servoRegistry[i].slotOccupied = false;
    }

    servoArrayIsInited = true;
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	80 93 6f 00 	sts	0x006F, r24
}//end initServoArray
     202:	08 95       	ret

00000204 <_ZN14ServoSequencer13registerServoEv>:
//              If no free slot is found returns kInvalidServoIndex.
//=============================================================================
uint8_t ServoSequencer::registerServo()
{

    if(servoArrayIsInited == false)
     204:	80 91 6f 00 	lds	r24, 0x006F
     208:	88 23       	and	r24, r24
     20a:	09 f4       	brne	.+2      	; 0x20e <_ZN14ServoSequencer13registerServoEv+0xa>
    {
        initServoArray();
     20c:	eb df       	rcall	.-42     	; 0x1e4 <_ZN14ServoSequencer14initServoArrayEv>
     20e:	a4 e7       	ldi	r26, 0x74	; 116
     210:	b0 e0       	ldi	r27, 0x00	; 0
     212:	e0 e0       	ldi	r30, 0x00	; 0
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	9e 2f       	mov	r25, r30


    //find a free slot in the servo registry
    for(uint8_t i = 0; i < kMaxNumberOfServosSupported; i++)
    {
        if(servoRegistry[i].slotOccupied == false)
     218:	8c 91       	ld	r24, X
     21a:	88 23       	and	r24, r24
     21c:	49 f4       	brne	.+18     	; 0x230 <_ZN14ServoSequencer13registerServoEv+0x2c>
        {
            //found a free slot.
            servoRegistry[i].slotOccupied = true;
     21e:	ee 0f       	add	r30, r30
     220:	ff 1f       	adc	r31, r31
     222:	ee 0f       	add	r30, r30
     224:	ff 1f       	adc	r31, r31
     226:	ef 58       	subi	r30, 0x8F	; 143
     228:	ff 4f       	sbci	r31, 0xFF	; 255
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	83 83       	std	Z+3, r24	; 0x03
     22e:	06 c0       	rjmp	.+12     	; 0x23c <_ZN14ServoSequencer13registerServoEv+0x38>
            //return the slot number
            return i;
     230:	31 96       	adiw	r30, 0x01	; 1
     232:	14 96       	adiw	r26, 0x04	; 4
        //It needs to be setup only once. We do it when the first servo is registered.
    }


    //find a free slot in the servo registry
    for(uint8_t i = 0; i < kMaxNumberOfServosSupported; i++)
     234:	e5 30       	cpi	r30, 0x05	; 5
     236:	f1 05       	cpc	r31, r1
     238:	71 f7       	brne	.-36     	; 0x216 <_ZN14ServoSequencer13registerServoEv+0x12>
     23a:	9f ef       	ldi	r25, 0xFF	; 255
            //this slot is not free, check the next one.
        }
    }
    //no free slots were found.
    return kInvalidServoIndex;
}//end registerServo
     23c:	89 2f       	mov	r24, r25
     23e:	08 95       	ret

00000240 <__vector_3>:
//
// INPUT:       Nothing
//
// RETURNS:     Nothing
//=============================================================================
ISR(TIM1_COMPA_vect)
     240:	1f 92       	push	r1
     242:	0f 92       	push	r0
     244:	0f b6       	in	r0, 0x3f	; 63
     246:	0f 92       	push	r0
     248:	11 24       	eor	r1, r1
     24a:	2f 93       	push	r18
     24c:	3f 93       	push	r19
     24e:	8f 93       	push	r24
     250:	9f 93       	push	r25
     252:	ef 93       	push	r30
     254:	ff 93       	push	r31
//
// RETURNS:     Nothing
//=============================================================================
void ServoSequencer::timerCompareMatchISR()
{
    switch (state)
     256:	80 91 60 00 	lds	r24, 0x0060
     25a:	81 30       	cpi	r24, 0x01	; 1
     25c:	09 f4       	brne	.+2      	; 0x260 <__stack+0x1>
     25e:	51 c0       	rjmp	.+162    	; 0x302 <__stack+0xa3>
     260:	81 30       	cpi	r24, 0x01	; 1
     262:	b8 f1       	brcs	.+110    	; 0x2d2 <__stack+0x73>
     264:	82 30       	cpi	r24, 0x02	; 2
     266:	09 f4       	brne	.+2      	; 0x26a <__stack+0xb>
     268:	9b c0       	rjmp	.+310    	; 0x3a0 <__stack+0x141>
     26a:	83 30       	cpi	r24, 0x03	; 3
     26c:	09 f0       	breq	.+2      	; 0x270 <__stack+0x11>
     26e:	9e c0       	rjmp	.+316    	; 0x3ac <__stack+0x14d>
    {
    case WAITING_TO_SET_PIN_HIGH:
        //go to the next servo in the registry
        ++servoIndex;
     270:	80 91 70 00 	lds	r24, 0x0070
     274:	8f 5f       	subi	r24, 0xFF	; 255
     276:	80 93 70 00 	sts	0x0070, r24
        //if we are the end of the registry, go to the beginning of it
        if(servoIndex == kMaxNumberOfServosSupported)
     27a:	80 91 70 00 	lds	r24, 0x0070
     27e:	85 30       	cpi	r24, 0x05	; 5
     280:	11 f4       	brne	.+4      	; 0x286 <__stack+0x27>
        {
            servoIndex = 0;
     282:	10 92 70 00 	sts	0x0070, r1
        {
            //we are not at the end, leave the servo index as is
        }

        //if this servo is enabled set the pin high
        if( servoRegistry[servoIndex].enabled == true )
     286:	e0 91 70 00 	lds	r30, 0x0070
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	ee 0f       	add	r30, r30
     28e:	ff 1f       	adc	r31, r31
     290:	ee 0f       	add	r30, r30
     292:	ff 1f       	adc	r31, r31
     294:	ed 58       	subi	r30, 0x8D	; 141
     296:	ff 4f       	sbci	r31, 0xFF	; 255
     298:	80 81       	ld	r24, Z
     29a:	88 23       	and	r24, r24
     29c:	a1 f0       	breq	.+40     	; 0x2c6 <__stack+0x67>
        {
            PORTB |= (1 << servoRegistry[servoIndex].pin);
     29e:	88 b3       	in	r24, 0x18	; 24
     2a0:	e0 91 70 00 	lds	r30, 0x0070
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	ee 0f       	add	r30, r30
     2a8:	ff 1f       	adc	r31, r31
     2aa:	ee 0f       	add	r30, r30
     2ac:	ff 1f       	adc	r31, r31
     2ae:	ef 58       	subi	r30, 0x8F	; 143
     2b0:	ff 4f       	sbci	r31, 0xFF	; 255
     2b2:	21 e0       	ldi	r18, 0x01	; 1
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	01 80       	ldd	r0, Z+1	; 0x01
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <__stack+0x5f>
     2ba:	22 0f       	add	r18, r18
     2bc:	33 1f       	adc	r19, r19
     2be:	0a 94       	dec	r0
     2c0:	e2 f7       	brpl	.-8      	; 0x2ba <__stack+0x5b>
     2c2:	82 2b       	or	r24, r18
     2c4:	88 bb       	out	0x18, r24	; 24
        {
            //This servo position is not enabled, don't manipulate the pin
        }

        //reset the counter to 0
        TCNTn  = 0;
     2c6:	1f bc       	out	0x2f, r1	; 47
        //set the compare value to 64 (512 us). This is the constant pulse offset.
        OCRnx = 64 - TRIM_DURATION; //trim off 4 ticks (32us), this is about the total combined time we spent inside this ISR;
     2c8:	8c e3       	ldi	r24, 0x3C	; 60
     2ca:	8e bd       	out	0x2e, r24	; 46
        //update our state
        state = WAITING_FOR_512_MARK;
     2cc:	10 92 60 00 	sts	0x0060, r1
     2d0:	6d c0       	rjmp	.+218    	; 0x3ac <__stack+0x14d>
        break;


    case WAITING_FOR_512_MARK:
        //set the compare value to the additional amount of timer ticks the pulse should last
        OCRnx = servoRegistry[servoIndex].pulseLengthInTicks;
     2d2:	e0 91 70 00 	lds	r30, 0x0070
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	ee 0f       	add	r30, r30
     2da:	ff 1f       	adc	r31, r31
     2dc:	ee 0f       	add	r30, r30
     2de:	ff 1f       	adc	r31, r31
     2e0:	ef 58       	subi	r30, 0x8F	; 143
     2e2:	ff 4f       	sbci	r31, 0xFF	; 255
     2e4:	80 81       	ld	r24, Z
     2e6:	8e bd       	out	0x2e, r24	; 46
        //update our state
        state = WAITING_TO_SET_PIN_LOW;
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	80 93 60 00 	sts	0x0060, r24

        //reset the counter to 0
        TCNTn  = 0;
     2ee:	1f bc       	out	0x2f, r1	; 47

        //Did we just set OCRnx to zero?
        if(OCRnx == 0)
     2f0:	8e b5       	in	r24, 0x2e	; 46
     2f2:	88 23       	and	r24, r24
     2f4:	19 f4       	brne	.+6      	; 0x2fc <__stack+0x9d>
        {
           //Since we are setting OCRnx and TCNTn to 0 we are not going to get an interrupt
           //until the counter overflows and goes back to 0.
           //set the counter its highest value, to have it overflow right away.
           TCNTn = 0xFF;
     2f6:	8f ef       	ldi	r24, 0xFF	; 255
     2f8:	8f bd       	out	0x2f, r24	; 47
     2fa:	58 c0       	rjmp	.+176    	; 0x3ac <__stack+0x14d>
        else
        {
            //otherwise we need to clear the OCF0A flag because it is possible that the
            //counter value incremented and matched the output compare value while this
            //function was being executed
            TIFR = (1 << OCF0A);  // write logical 1 to the OCF0A flag to clear it
     2fc:	80 e1       	ldi	r24, 0x10	; 16
     2fe:	88 bf       	out	0x38, r24	; 56
     300:	55 c0       	rjmp	.+170    	; 0x3ac <__stack+0x14d>
        break;


    case WAITING_TO_SET_PIN_LOW:
        //if this servo is enabled set the pin low
        if( servoRegistry[servoIndex].enabled == true )
     302:	e0 91 70 00 	lds	r30, 0x0070
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	ee 0f       	add	r30, r30
     30a:	ff 1f       	adc	r31, r31
     30c:	ee 0f       	add	r30, r30
     30e:	ff 1f       	adc	r31, r31
     310:	ed 58       	subi	r30, 0x8D	; 141
     312:	ff 4f       	sbci	r31, 0xFF	; 255
     314:	80 81       	ld	r24, Z
     316:	88 23       	and	r24, r24
     318:	a9 f0       	breq	.+42     	; 0x344 <__stack+0xe5>
        {
            PORTB &= ~(1 << servoRegistry[servoIndex].pin);
     31a:	28 b3       	in	r18, 0x18	; 24
     31c:	e0 91 70 00 	lds	r30, 0x0070
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	ee 0f       	add	r30, r30
     324:	ff 1f       	adc	r31, r31
     326:	ee 0f       	add	r30, r30
     328:	ff 1f       	adc	r31, r31
     32a:	ef 58       	subi	r30, 0x8F	; 143
     32c:	ff 4f       	sbci	r31, 0xFF	; 255
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	01 80       	ldd	r0, Z+1	; 0x01
     334:	02 c0       	rjmp	.+4      	; 0x33a <__stack+0xdb>
     336:	88 0f       	add	r24, r24
     338:	99 1f       	adc	r25, r25
     33a:	0a 94       	dec	r0
     33c:	e2 f7       	brpl	.-8      	; 0x336 <__stack+0xd7>
     33e:	80 95       	com	r24
     340:	82 23       	and	r24, r18
     342:	88 bb       	out	0x18, r24	; 24
        {
            //This servo position is not enabled, don't manipulate the pin
        }

        //check if the length of this pulse is 2048 microseconds or longer
        if( (64 + servoRegistry[servoIndex].pulseLengthInTicks) > 255 )
     344:	e0 91 70 00 	lds	r30, 0x0070
     348:	f0 e0       	ldi	r31, 0x00	; 0
     34a:	ee 0f       	add	r30, r30
     34c:	ff 1f       	adc	r31, r31
     34e:	ee 0f       	add	r30, r30
     350:	ff 1f       	adc	r31, r31
     352:	ef 58       	subi	r30, 0x8F	; 143
     354:	ff 4f       	sbci	r31, 0xFF	; 255
     356:	80 81       	ld	r24, Z
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	80 3c       	cpi	r24, 0xC0	; 192
     35c:	91 05       	cpc	r25, r1
     35e:	74 f0       	brlt	.+28     	; 0x37c <__stack+0x11d>
        {
            //This pulse length has passed the 2048 us mark, so we skip state WAITING_FOR_2048_MARK
            //update state
            state = WAITING_TO_SET_PIN_HIGH;
     360:	83 e0       	ldi	r24, 0x03	; 3
     362:	80 93 60 00 	sts	0x0060, r24
            //set the compare value to the amount of time (in timer ticks) we need to wait to reach
            //4096 microseconds mark
            //which is 512 minus the total pulse length. (resulting number will be between 0 and 255 inclusive)
            OCRnx = 512 - (64 + servoRegistry[servoIndex].pulseLengthInTicks);
     366:	e0 91 70 00 	lds	r30, 0x0070
     36a:	f0 e0       	ldi	r31, 0x00	; 0
     36c:	ee 0f       	add	r30, r30
     36e:	ff 1f       	adc	r31, r31
     370:	ee 0f       	add	r30, r30
     372:	ff 1f       	adc	r31, r31
     374:	ef 58       	subi	r30, 0x8F	; 143
     376:	ff 4f       	sbci	r31, 0xFF	; 255
     378:	80 ec       	ldi	r24, 0xC0	; 192
     37a:	0d c0       	rjmp	.+26     	; 0x396 <__stack+0x137>
        }
        else
        {
            //This pulse length has not reached the 2048 us mark, therefor we have to get to that mark first
            //update state
            state = WAITING_FOR_2048_MARK;
     37c:	82 e0       	ldi	r24, 0x02	; 2
     37e:	80 93 60 00 	sts	0x0060, r24
            //set OCRnx to the amount of time (in timer ticks) we have to wait to reach this mark
            //which is 255 minus the total pulse length
            OCRnx = 255 - (64 + servoRegistry[servoIndex].pulseLengthInTicks);
     382:	e0 91 70 00 	lds	r30, 0x0070
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	ee 0f       	add	r30, r30
     38a:	ff 1f       	adc	r31, r31
     38c:	ee 0f       	add	r30, r30
     38e:	ff 1f       	adc	r31, r31
     390:	ef 58       	subi	r30, 0x8F	; 143
     392:	ff 4f       	sbci	r31, 0xFF	; 255
     394:	8f eb       	ldi	r24, 0xBF	; 191
     396:	90 81       	ld	r25, Z
     398:	89 1b       	sub	r24, r25
     39a:	8e bd       	out	0x2e, r24	; 46
        }

        //reset the counter to 0
        TCNTn  = 0;
     39c:	1f bc       	out	0x2f, r1	; 47
     39e:	06 c0       	rjmp	.+12     	; 0x3ac <__stack+0x14d>

        break;

    case WAITING_FOR_2048_MARK:
        //update state
        state = WAITING_TO_SET_PIN_HIGH;
     3a0:	83 e0       	ldi	r24, 0x03	; 3
     3a2:	80 93 60 00 	sts	0x0060, r24
        //reset the counter to 0
        TCNTn  = 0;
     3a6:	1f bc       	out	0x2f, r1	; 47
        //set the compare value to the longest length of time, 255 ticks, or 2040 microseconds
        //This will take us to the ~4096 microsecond mark,
        //at which point the cycle starts again with the next servo slot.
        OCRnx = 255;
     3a8:	8f ef       	ldi	r24, 0xFF	; 255
     3aa:	8e bd       	out	0x2e, r24	; 46
// RETURNS:     Nothing
//=============================================================================
ISR(TIM1_COMPA_vect)
{
    ServoSequencer::timerCompareMatchISR();
}//end ISR TIM0_COMPA_vect
     3ac:	ff 91       	pop	r31
     3ae:	ef 91       	pop	r30
     3b0:	9f 91       	pop	r25
     3b2:	8f 91       	pop	r24
     3b4:	3f 91       	pop	r19
     3b6:	2f 91       	pop	r18
     3b8:	0f 90       	pop	r0
     3ba:	0f be       	out	0x3f, r0	; 63
     3bc:	0f 90       	pop	r0
     3be:	1f 90       	pop	r1
     3c0:	18 95       	reti

000003c2 <_ZN9Servo8BitC2Ev>:
// INPUT:       Nothing
//
// RETURNS:     Nothing
//
//=============================================================================
Servo8Bit::Servo8Bit()
     3c2:	0f 93       	push	r16
     3c4:	1f 93       	push	r17
     3c6:	8c 01       	movw	r16, r24
:invalidServoNumber(ServoSequencer::kInvalidServoIndex),
 myServoNumber(invalidServoNumber),
 myMin(kDefaultMinimalPulse),
 myMax(kDefaultMaximumPulse)
     3c8:	fc 01       	movw	r30, r24
     3ca:	81 81       	ldd	r24, Z+1	; 0x01
     3cc:	80 83       	st	Z, r24
     3ce:	8f ef       	ldi	r24, 0xFF	; 255
     3d0:	81 83       	std	Z+1, r24	; 0x01
     3d2:	80 e2       	ldi	r24, 0x20	; 32
     3d4:	92 e0       	ldi	r25, 0x02	; 2
     3d6:	93 83       	std	Z+3, r25	; 0x03
     3d8:	82 83       	std	Z+2, r24	; 0x02
     3da:	80 e6       	ldi	r24, 0x60	; 96
     3dc:	99 e0       	ldi	r25, 0x09	; 9
     3de:	95 83       	std	Z+5, r25	; 0x05
     3e0:	84 83       	std	Z+4, r24	; 0x04
{
	myServoNumber = ServoSequencer::registerServo();
     3e2:	10 df       	rcall	.-480    	; 0x204 <_ZN14ServoSequencer13registerServoEv>
     3e4:	f8 01       	movw	r30, r16
     3e6:	80 83       	st	Z, r24
}//end constructor
     3e8:	1f 91       	pop	r17
     3ea:	0f 91       	pop	r16
     3ec:	08 95       	ret

000003ee <_ZN9Servo8BitC1Ev>:
// INPUT:       Nothing
//
// RETURNS:     Nothing
//
//=============================================================================
Servo8Bit::Servo8Bit()
     3ee:	0f 93       	push	r16
     3f0:	1f 93       	push	r17
     3f2:	8c 01       	movw	r16, r24
:invalidServoNumber(ServoSequencer::kInvalidServoIndex),
 myServoNumber(invalidServoNumber),
 myMin(kDefaultMinimalPulse),
 myMax(kDefaultMaximumPulse)
     3f4:	fc 01       	movw	r30, r24
     3f6:	81 81       	ldd	r24, Z+1	; 0x01
     3f8:	80 83       	st	Z, r24
     3fa:	8f ef       	ldi	r24, 0xFF	; 255
     3fc:	81 83       	std	Z+1, r24	; 0x01
     3fe:	80 e2       	ldi	r24, 0x20	; 32
     400:	92 e0       	ldi	r25, 0x02	; 2
     402:	93 83       	std	Z+3, r25	; 0x03
     404:	82 83       	std	Z+2, r24	; 0x02
     406:	80 e6       	ldi	r24, 0x60	; 96
     408:	99 e0       	ldi	r25, 0x09	; 9
     40a:	95 83       	std	Z+5, r25	; 0x05
     40c:	84 83       	std	Z+4, r24	; 0x04
{
	myServoNumber = ServoSequencer::registerServo();
     40e:	fa de       	rcall	.-524    	; 0x204 <_ZN14ServoSequencer13registerServoEv>
     410:	f8 01       	movw	r30, r16
     412:	80 83       	st	Z, r24
}//end constructor
     414:	1f 91       	pop	r17
     416:	0f 91       	pop	r16
     418:	08 95       	ret

0000041a <_ZN9Servo8BitD2Ev>:
// INPUT:       Nothing
//
// RETURNS:     Nothing
//
//=============================================================================
Servo8Bit::~Servo8Bit()
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
     41e:	ec 01       	movw	r28, r24
// RETURNS:     Nothing
//
//=============================================================================
void Servo8Bit::detach()
{
    ServoSequencer::deregisterServo(myServoNumber);
     420:	e8 81       	ld	r30, Y
// RETURNS:     Nothing
//=============================================================================
void ServoSequencer::deregisterServo(uint8_t servoSlotNumber)
{
    //make sure we got a valid slot number
    if(servoSlotNumber < kMaxNumberOfServosSupported)
     422:	e5 30       	cpi	r30, 0x05	; 5
     424:	70 f4       	brcc	.+28     	; 0x442 <_ZN9Servo8BitD2Ev+0x28>
    {
        servoRegistry[servoSlotNumber].enabled      = false;
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	ee 0f       	add	r30, r30
     42a:	ff 1f       	adc	r31, r31
     42c:	ee 0f       	add	r30, r30
     42e:	ff 1f       	adc	r31, r31
     430:	df 01       	movw	r26, r30
     432:	ad 58       	subi	r26, 0x8D	; 141
     434:	bf 4f       	sbci	r27, 0xFF	; 255
     436:	1c 92       	st	X, r1
        servoRegistry[servoSlotNumber].slotOccupied = false;
     438:	ef 58       	subi	r30, 0x8F	; 143
     43a:	ff 4f       	sbci	r31, 0xFF	; 255
     43c:	13 82       	std	Z+3, r1	; 0x03
		servoRegistry[servoSlotNumber].pulseLengthInTicks = 128; //restore the pulse length to the default setting.
     43e:	80 e8       	ldi	r24, 0x80	; 128
     440:	80 83       	st	Z, r24
//
//=============================================================================
void Servo8Bit::detach()
{
    ServoSequencer::deregisterServo(myServoNumber);
    myServoNumber = invalidServoNumber;
     442:	89 81       	ldd	r24, Y+1	; 0x01
     444:	88 83       	st	Y, r24
//
//=============================================================================
Servo8Bit::~Servo8Bit()
{
	detach();
}//end destructor
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	08 95       	ret

0000044c <_ZN9Servo8BitD1Ev>:
// INPUT:       Nothing
//
// RETURNS:     Nothing
//
//=============================================================================
Servo8Bit::~Servo8Bit()
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	ec 01       	movw	r28, r24
// RETURNS:     Nothing
//
//=============================================================================
void Servo8Bit::detach()
{
    ServoSequencer::deregisterServo(myServoNumber);
     452:	e8 81       	ld	r30, Y
// RETURNS:     Nothing
//=============================================================================
void ServoSequencer::deregisterServo(uint8_t servoSlotNumber)
{
    //make sure we got a valid slot number
    if(servoSlotNumber < kMaxNumberOfServosSupported)
     454:	e5 30       	cpi	r30, 0x05	; 5
     456:	70 f4       	brcc	.+28     	; 0x474 <_ZN9Servo8BitD1Ev+0x28>
    {
        servoRegistry[servoSlotNumber].enabled      = false;
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	ee 0f       	add	r30, r30
     45c:	ff 1f       	adc	r31, r31
     45e:	ee 0f       	add	r30, r30
     460:	ff 1f       	adc	r31, r31
     462:	df 01       	movw	r26, r30
     464:	ad 58       	subi	r26, 0x8D	; 141
     466:	bf 4f       	sbci	r27, 0xFF	; 255
     468:	1c 92       	st	X, r1
        servoRegistry[servoSlotNumber].slotOccupied = false;
     46a:	ef 58       	subi	r30, 0x8F	; 143
     46c:	ff 4f       	sbci	r31, 0xFF	; 255
     46e:	13 82       	std	Z+3, r1	; 0x03
		servoRegistry[servoSlotNumber].pulseLengthInTicks = 128; //restore the pulse length to the default setting.
     470:	80 e8       	ldi	r24, 0x80	; 128
     472:	80 83       	st	Z, r24
//
//=============================================================================
void Servo8Bit::detach()
{
    ServoSequencer::deregisterServo(myServoNumber);
    myServoNumber = invalidServoNumber;
     474:	89 81       	ldd	r24, Y+1	; 0x01
     476:	88 83       	st	Y, r24
//
//=============================================================================
Servo8Bit::~Servo8Bit()
{
	detach();
}//end destructor
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	08 95       	ret

0000047e <_ZN9Servo8Bit6attachEh>:
// INPUT:       pin - which pin on portB to attach to
//
// RETURNS:     The servo number of this servo.
//
//=============================================================================
uint8_t Servo8Bit::attach(uint8_t pin)
     47e:	1f 93       	push	r17
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	ec 01       	movw	r28, r24
     486:	16 2f       	mov	r17, r22
{	
	//Do we need to register with the servo sequencer?
    if(myServoNumber == invalidServoNumber)
     488:	98 81       	ld	r25, Y
     48a:	89 81       	ldd	r24, Y+1	; 0x01
     48c:	98 17       	cp	r25, r24
     48e:	39 f4       	brne	.+14     	; 0x49e <_ZN9Servo8Bit6attachEh+0x20>
	{
		//Yep, we do, so register and save our servo number.
		myServoNumber = ServoSequencer::registerServo();
     490:	b9 de       	rcall	.-654    	; 0x204 <_ZN14ServoSequencer13registerServoEv>
     492:	88 83       	st	Y, r24
		if(myServoNumber == invalidServoNumber)
     494:	99 81       	ldd	r25, Y+1	; 0x01
     496:	89 17       	cp	r24, r25
     498:	11 f4       	brne	.+4      	; 0x49e <_ZN9Servo8Bit6attachEh+0x20>
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	1f c0       	rjmp	.+62     	; 0x4dc <_ZN9Servo8Bit6attachEh+0x5e>

    //LIMITATION: this servo class only works with PORTB, which is the only port
    //on the attiny45 and attiny85

    //valid pin values are between 0 and 5, inclusive.
    if( pin <= 5 )
     49e:	16 30       	cpi	r17, 0x06	; 6
     4a0:	e0 f4       	brcc	.+56     	; 0x4da <_ZN9Servo8Bit6attachEh+0x5c>
    {
        DDRB |= (1<<pin); //set pin as output
     4a2:	27 b3       	in	r18, 0x17	; 23
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	01 2e       	mov	r0, r17
     4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <_ZN9Servo8Bit6attachEh+0x32>
     4ac:	88 0f       	add	r24, r24
     4ae:	99 1f       	adc	r25, r25
     4b0:	0a 94       	dec	r0
     4b2:	e2 f7       	brpl	.-8      	; 0x4ac <_ZN9Servo8Bit6attachEh+0x2e>
     4b4:	28 2b       	or	r18, r24
     4b6:	27 bb       	out	0x17, r18	; 23
        //set the servo pin
        ServoSequencer::setServoPin(myServoNumber, pin);
     4b8:	88 81       	ld	r24, Y
//
//=============================================================================
void ServoSequencer::setServoPin(uint8_t servoNumber, uint8_t newPin)
{
    //make sure we got a valid slot number and the slot is registered to a servo
    if( (servoNumber < kMaxNumberOfServosSupported      ) &&
     4ba:	85 30       	cpi	r24, 0x05	; 5
     4bc:	58 f4       	brcc	.+22     	; 0x4d4 <_ZN9Servo8Bit6attachEh+0x56>
     4be:	e8 2f       	mov	r30, r24
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	ee 0f       	add	r30, r30
     4c4:	ff 1f       	adc	r31, r31
     4c6:	ee 0f       	add	r30, r30
     4c8:	ff 1f       	adc	r31, r31
     4ca:	ef 58       	subi	r30, 0x8F	; 143
     4cc:	ff 4f       	sbci	r31, 0xFF	; 255
     4ce:	83 81       	ldd	r24, Z+3	; 0x03
     4d0:	81 11       	cpse	r24, r1
        (servoRegistry[servoNumber].slotOccupied == true)   )
    {

        servoRegistry[servoNumber].pin = newPin;
     4d2:	11 83       	std	Z+1, r17	; 0x01
    {
        DDRB |= (1<<pin); //set pin as output
        //set the servo pin
        ServoSequencer::setServoPin(myServoNumber, pin);
        //enable the servo to start outputing the pwm wave
        ServoSequencer::enableDisableServo(myServoNumber, true);
     4d4:	88 81       	ld	r24, Y
     4d6:	61 e0       	ldi	r22, 0x01	; 1
     4d8:	58 de       	rcall	.-848    	; 0x18a <_ZN14ServoSequencer18enableDisableServoEhb>
    else
    {
        //bad pin value. do nothing.
    }

    return myServoNumber;
     4da:	88 81       	ld	r24, Y

}//end attach
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	1f 91       	pop	r17
     4e2:	08 95       	ret

000004e4 <_ZN9Servo8Bit6attachEhjj>:
//              max - maximum pulse length to use
//
// RETURNS:
//
//=============================================================================
uint8_t Servo8Bit::attach(uint8_t pin, uint16_t newMin, uint16_t newMax)
     4e4:	fc 01       	movw	r30, r24
{
    myMin = newMin;
     4e6:	53 83       	std	Z+3, r21	; 0x03
     4e8:	42 83       	std	Z+2, r20	; 0x02
    myMax = newMax;
     4ea:	35 83       	std	Z+5, r19	; 0x05
     4ec:	24 83       	std	Z+4, r18	; 0x04
    return attach(pin);
     4ee:	c7 df       	rcall	.-114    	; 0x47e <_ZN9Servo8Bit6attachEh>
}//end attach with min/max
     4f0:	08 95       	ret

000004f2 <_ZN9Servo8Bit6detachEv>:
// INPUT:       Nothing
//
// RETURNS:     Nothing
//
//=============================================================================
void Servo8Bit::detach()
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	ec 01       	movw	r28, r24
{
    ServoSequencer::deregisterServo(myServoNumber);
     4f8:	e8 81       	ld	r30, Y
// RETURNS:     Nothing
//=============================================================================
void ServoSequencer::deregisterServo(uint8_t servoSlotNumber)
{
    //make sure we got a valid slot number
    if(servoSlotNumber < kMaxNumberOfServosSupported)
     4fa:	e5 30       	cpi	r30, 0x05	; 5
     4fc:	70 f4       	brcc	.+28     	; 0x51a <_ZN9Servo8Bit6detachEv+0x28>
    {
        servoRegistry[servoSlotNumber].enabled      = false;
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	ee 0f       	add	r30, r30
     502:	ff 1f       	adc	r31, r31
     504:	ee 0f       	add	r30, r30
     506:	ff 1f       	adc	r31, r31
     508:	df 01       	movw	r26, r30
     50a:	ad 58       	subi	r26, 0x8D	; 141
     50c:	bf 4f       	sbci	r27, 0xFF	; 255
     50e:	1c 92       	st	X, r1
        servoRegistry[servoSlotNumber].slotOccupied = false;
     510:	ef 58       	subi	r30, 0x8F	; 143
     512:	ff 4f       	sbci	r31, 0xFF	; 255
     514:	13 82       	std	Z+3, r1	; 0x03
		servoRegistry[servoSlotNumber].pulseLengthInTicks = 128; //restore the pulse length to the default setting.
     516:	80 e8       	ldi	r24, 0x80	; 128
     518:	80 83       	st	Z, r24
//
//=============================================================================
void Servo8Bit::detach()
{
    ServoSequencer::deregisterServo(myServoNumber);
    myServoNumber = invalidServoNumber;
     51a:	89 81       	ldd	r24, Y+1	; 0x01
     51c:	88 83       	st	Y, r24
}
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	08 95       	ret

00000524 <_ZN9Servo8Bit17writeMicrosecondsEj>:
// INPUT:       value - the pulse width of the servo pulse in microseconds
//
// RETURNS:     Nothing
//
//=============================================================================
void Servo8Bit::writeMicroseconds(uint16_t value)
     524:	fc 01       	movw	r30, r24
{
    //make sure we have a valid servo number. If it's invalid then exit doing nothing.
    if(myServoNumber == invalidServoNumber) return;
     526:	90 81       	ld	r25, Z
     528:	81 81       	ldd	r24, Z+1	; 0x01
     52a:	98 17       	cp	r25, r24
     52c:	11 f0       	breq	.+4      	; 0x532 <_ZN9Servo8Bit17writeMicrosecondsEj+0xe>

    ServoSequencer::setServoPulseLength(myServoNumber, value );
     52e:	89 2f       	mov	r24, r25
     530:	b9 dd       	rcall	.-1166   	; 0xa4 <_ZN14ServoSequencer19setServoPulseLengthEhj>
     532:	08 95       	ret

00000534 <_ZN9Servo8Bit16readMicrosecondsEv>:
// INPUT:       Nothing
//
// RETURNS:     The pulse width in microseconds
//
//=============================================================================
uint16_t Servo8Bit::readMicroseconds()
     534:	fc 01       	movw	r30, r24
{
    //make sure we have a valid servo number. If it's invalid then exit doing nothing.
    if(myServoNumber == invalidServoNumber) return 0;
     536:	90 81       	ld	r25, Z
     538:	81 81       	ldd	r24, Z+1	; 0x01
     53a:	98 17       	cp	r25, r24
     53c:	b9 f0       	breq	.+46     	; 0x56c <_ZN9Servo8Bit16readMicrosecondsEv+0x38>
uint16_t ServoSequencer::getServoPulseLength(uint8_t servoNumber)
{
    uint16_t pulseLength = 0;

    //make sure we got a valid slot number and the slot is registered to a servo
    if( (servoNumber < kMaxNumberOfServosSupported      ) &&
     53e:	95 30       	cpi	r25, 0x05	; 5
     540:	a8 f4       	brcc	.+42     	; 0x56c <_ZN9Servo8Bit16readMicrosecondsEv+0x38>
     542:	e9 2f       	mov	r30, r25
     544:	f0 e0       	ldi	r31, 0x00	; 0
     546:	ee 0f       	add	r30, r30
     548:	ff 1f       	adc	r31, r31
     54a:	ee 0f       	add	r30, r30
     54c:	ff 1f       	adc	r31, r31
     54e:	ef 58       	subi	r30, 0x8F	; 143
     550:	ff 4f       	sbci	r31, 0xFF	; 255
     552:	83 81       	ldd	r24, Z+3	; 0x03
     554:	88 23       	and	r24, r24
     556:	51 f0       	breq	.+20     	; 0x56c <_ZN9Servo8Bit16readMicrosecondsEv+0x38>
        (servoRegistry[servoNumber].slotOccupied == true)   )
    {
        pulseLength = (servoRegistry[servoNumber].pulseLengthInTicks * 8) + 64;
     558:	80 81       	ld	r24, Z
     55a:	e8 2f       	mov	r30, r24
     55c:	f0 e0       	ldi	r31, 0x00	; 0
     55e:	38 96       	adiw	r30, 0x08	; 8
     560:	93 e0       	ldi	r25, 0x03	; 3
     562:	ee 0f       	add	r30, r30
     564:	ff 1f       	adc	r31, r31
     566:	9a 95       	dec	r25
     568:	e1 f7       	brne	.-8      	; 0x562 <_ZN9Servo8Bit16readMicrosecondsEv+0x2e>
     56a:	02 c0       	rjmp	.+4      	; 0x570 <_ZN9Servo8Bit16readMicrosecondsEv+0x3c>
     56c:	e0 e0       	ldi	r30, 0x00	; 0
     56e:	f0 e0       	ldi	r31, 0x00	; 0
{
    //make sure we have a valid servo number. If it's invalid then exit doing nothing.
    if(myServoNumber == invalidServoNumber) return 0;

    return ServoSequencer::getServoPulseLength(myServoNumber);
}//end readMicroseconds
     570:	cf 01       	movw	r24, r30
     572:	08 95       	ret

00000574 <_ZN9Servo8Bit8attachedEv>:
//
// RETURNS:     true, if attached
//              false, otherwise
//
//=============================================================================
bool Servo8Bit::attached()
     574:	fc 01       	movw	r30, r24
{
    //make sure we have a valid servo number. If it's invalid then exit doing nothing.
    if(myServoNumber == invalidServoNumber) return false;
     576:	90 81       	ld	r25, Z
     578:	81 81       	ldd	r24, Z+1	; 0x01
     57a:	98 17       	cp	r25, r24
     57c:	b1 f0       	breq	.+44     	; 0x5aa <_ZN9Servo8Bit8attachedEv+0x36>
//
//=============================================================================
bool ServoSequencer::isEnabled(uint8_t servoNumber)
{
    //make sure we got a valid slot number and the slot is registered to a servo
    if( (servoNumber < kMaxNumberOfServosSupported      ) &&
     57e:	95 30       	cpi	r25, 0x05	; 5
     580:	a0 f4       	brcc	.+40     	; 0x5aa <_ZN9Servo8Bit8attachedEv+0x36>
     582:	a9 2f       	mov	r26, r25
     584:	b0 e0       	ldi	r27, 0x00	; 0
     586:	fd 01       	movw	r30, r26
     588:	ee 0f       	add	r30, r30
     58a:	ff 1f       	adc	r31, r31
     58c:	ee 0f       	add	r30, r30
     58e:	ff 1f       	adc	r31, r31
     590:	ef 58       	subi	r30, 0x8F	; 143
     592:	ff 4f       	sbci	r31, 0xFF	; 255
     594:	83 81       	ldd	r24, Z+3	; 0x03
     596:	88 23       	and	r24, r24
     598:	41 f0       	breq	.+16     	; 0x5aa <_ZN9Servo8Bit8attachedEv+0x36>
        (servoRegistry[servoNumber].slotOccupied == true)   )
    {
        return servoRegistry[servoNumber].enabled;
     59a:	aa 0f       	add	r26, r26
     59c:	bb 1f       	adc	r27, r27
     59e:	aa 0f       	add	r26, r26
     5a0:	bb 1f       	adc	r27, r27
     5a2:	ad 58       	subi	r26, 0x8D	; 141
     5a4:	bf 4f       	sbci	r27, 0xFF	; 255
     5a6:	8c 91       	ld	r24, X
     5a8:	08 95       	ret
     5aa:	80 e0       	ldi	r24, 0x00	; 0
{
    //make sure we have a valid servo number. If it's invalid then exit doing nothing.
    if(myServoNumber == invalidServoNumber) return false;

    return ServoSequencer::isEnabled(myServoNumber);
}//end attached
     5ac:	08 95       	ret

000005ae <_ZN9Servo8Bit3mapElllll>:
//              out_max - to high
//
// RETURNS:     re-maped value
//
//=============================================================================
long Servo8Bit::map(long x, long in_min, long in_max, long out_min, long out_max)
     5ae:	4f 92       	push	r4
     5b0:	5f 92       	push	r5
     5b2:	6f 92       	push	r6
     5b4:	7f 92       	push	r7
     5b6:	8f 92       	push	r8
     5b8:	9f 92       	push	r9
     5ba:	af 92       	push	r10
     5bc:	bf 92       	push	r11
     5be:	cf 92       	push	r12
     5c0:	df 92       	push	r13
     5c2:	ef 92       	push	r14
     5c4:	ff 92       	push	r15
     5c6:	0f 93       	push	r16
     5c8:	1f 93       	push	r17
     5ca:	df 93       	push	r29
     5cc:	cf 93       	push	r28
     5ce:	00 d0       	rcall	.+0      	; 0x5d0 <_ZN9Servo8Bit3mapElllll+0x22>
     5d0:	00 d0       	rcall	.+0      	; 0x5d2 <_ZN9Servo8Bit3mapElllll+0x24>
     5d2:	cd b7       	in	r28, 0x3d	; 61
     5d4:	de b7       	in	r29, 0x3e	; 62
     5d6:	2a 01       	movw	r4, r20
     5d8:	3b 01       	movw	r6, r22
     5da:	09 83       	std	Y+1, r16	; 0x01
     5dc:	1a 83       	std	Y+2, r17	; 0x02
     5de:	2b 83       	std	Y+3, r18	; 0x03
     5e0:	3c 83       	std	Y+4, r19	; 0x04
     5e2:	6f 89       	ldd	r22, Y+23	; 0x17
     5e4:	78 8d       	ldd	r23, Y+24	; 0x18
     5e6:	89 8d       	ldd	r24, Y+25	; 0x19
     5e8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     5ea:	68 19       	sub	r22, r8
     5ec:	79 09       	sbc	r23, r9
     5ee:	8a 09       	sbc	r24, r10
     5f0:	9b 09       	sbc	r25, r11
     5f2:	40 1a       	sub	r4, r16
     5f4:	51 0a       	sbc	r5, r17
     5f6:	62 0a       	sbc	r6, r18
     5f8:	73 0a       	sbc	r7, r19
     5fa:	a3 01       	movw	r20, r6
     5fc:	92 01       	movw	r18, r4
     5fe:	7a d6       	rcall	.+3316   	; 0x12f4 <__mulsi3>
     600:	29 81       	ldd	r18, Y+1	; 0x01
     602:	3a 81       	ldd	r19, Y+2	; 0x02
     604:	4b 81       	ldd	r20, Y+3	; 0x03
     606:	5c 81       	ldd	r21, Y+4	; 0x04
     608:	c2 1a       	sub	r12, r18
     60a:	d3 0a       	sbc	r13, r19
     60c:	e4 0a       	sbc	r14, r20
     60e:	f5 0a       	sbc	r15, r21
     610:	a7 01       	movw	r20, r14
     612:	96 01       	movw	r18, r12
     614:	88 d6       	rcall	.+3344   	; 0x1326 <__divmodsi4>
     616:	28 0d       	add	r18, r8
     618:	39 1d       	adc	r19, r9
     61a:	4a 1d       	adc	r20, r10
     61c:	5b 1d       	adc	r21, r11
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}//end map
     61e:	b9 01       	movw	r22, r18
     620:	ca 01       	movw	r24, r20
     622:	0f 90       	pop	r0
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	cf 91       	pop	r28
     62c:	df 91       	pop	r29
     62e:	1f 91       	pop	r17
     630:	0f 91       	pop	r16
     632:	ff 90       	pop	r15
     634:	ef 90       	pop	r14
     636:	df 90       	pop	r13
     638:	cf 90       	pop	r12
     63a:	bf 90       	pop	r11
     63c:	af 90       	pop	r10
     63e:	9f 90       	pop	r9
     640:	8f 90       	pop	r8
     642:	7f 90       	pop	r7
     644:	6f 90       	pop	r6
     646:	5f 90       	pop	r5
     648:	4f 90       	pop	r4
     64a:	08 95       	ret

0000064c <_ZN9Servo8Bit4readEv>:
// INPUT:       Nothing
//
// RETURNS:     Angle between 0 and 180
//
//=============================================================================
uint16_t Servo8Bit::read()
     64c:	8f 92       	push	r8
     64e:	9f 92       	push	r9
     650:	af 92       	push	r10
     652:	bf 92       	push	r11
     654:	cf 92       	push	r12
     656:	df 92       	push	r13
     658:	ef 92       	push	r14
     65a:	ff 92       	push	r15
     65c:	0f 93       	push	r16
     65e:	1f 93       	push	r17
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	ec 01       	movw	r28, r24
{
    //make sure we have a valid servo number. If it's invalid then exit doing nothing.
    if(myServoNumber == invalidServoNumber) return 0;
     666:	98 81       	ld	r25, Y
     668:	89 81       	ldd	r24, Y+1	; 0x01
     66a:	98 17       	cp	r25, r24
     66c:	19 f4       	brne	.+6      	; 0x674 <_ZN9Servo8Bit4readEv+0x28>
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	22 c0       	rjmp	.+68     	; 0x6b8 <_ZN9Servo8Bit4readEv+0x6c>

    uint16_t servoPulseLengthInUs = readMicroseconds();
     674:	ce 01       	movw	r24, r28
     676:	5e df       	rcall	.-324    	; 0x534 <_ZN9Servo8Bit16readMicrosecondsEv>
    uint16_t servoPositionInDegrees = map(servoPulseLengthInUs, myMin, myMax, 0, 180);
     678:	00 d0       	rcall	.+0      	; 0x67a <_ZN9Servo8Bit4readEv+0x2e>
     67a:	00 d0       	rcall	.+0      	; 0x67c <_ZN9Servo8Bit4readEv+0x30>
     67c:	ac 01       	movw	r20, r24
     67e:	60 e0       	ldi	r22, 0x00	; 0
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	0a 81       	ldd	r16, Y+2	; 0x02
     684:	1b 81       	ldd	r17, Y+3	; 0x03
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	cc 80       	ldd	r12, Y+4	; 0x04
     68c:	dd 80       	ldd	r13, Y+5	; 0x05
     68e:	ee 24       	eor	r14, r14
     690:	ff 24       	eor	r15, r15
     692:	84 eb       	ldi	r24, 0xB4	; 180
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	a0 e0       	ldi	r26, 0x00	; 0
     698:	b0 e0       	ldi	r27, 0x00	; 0
     69a:	ed b7       	in	r30, 0x3d	; 61
     69c:	fe b7       	in	r31, 0x3e	; 62
     69e:	81 83       	std	Z+1, r24	; 0x01
     6a0:	92 83       	std	Z+2, r25	; 0x02
     6a2:	a3 83       	std	Z+3, r26	; 0x03
     6a4:	b4 83       	std	Z+4, r27	; 0x04
     6a6:	ce 01       	movw	r24, r28
     6a8:	88 24       	eor	r8, r8
     6aa:	99 24       	eor	r9, r9
     6ac:	54 01       	movw	r10, r8
     6ae:	7f df       	rcall	.-258    	; 0x5ae <_ZN9Servo8Bit3mapElllll>
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
    return servoPositionInDegrees;
}//end read
     6b8:	cb 01       	movw	r24, r22
     6ba:	df 91       	pop	r29
     6bc:	cf 91       	pop	r28
     6be:	1f 91       	pop	r17
     6c0:	0f 91       	pop	r16
     6c2:	ff 90       	pop	r15
     6c4:	ef 90       	pop	r14
     6c6:	df 90       	pop	r13
     6c8:	cf 90       	pop	r12
     6ca:	bf 90       	pop	r11
     6cc:	af 90       	pop	r10
     6ce:	9f 90       	pop	r9
     6d0:	8f 90       	pop	r8
     6d2:	08 95       	ret

000006d4 <_ZN9Servo8Bit5writeEj>:
// INPUT:       value - position for the servo to move to
//
// RETURNS:     Nothing
//
//=============================================================================
void Servo8Bit::write(uint16_t value)
     6d4:	8f 92       	push	r8
     6d6:	9f 92       	push	r9
     6d8:	af 92       	push	r10
     6da:	bf 92       	push	r11
     6dc:	cf 92       	push	r12
     6de:	df 92       	push	r13
     6e0:	ef 92       	push	r14
     6e2:	ff 92       	push	r15
     6e4:	0f 93       	push	r16
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	ec 01       	movw	r28, r24
{
    //make sure we have a valid servo number. If it's invalid then exit doing nothing.
    if(myServoNumber == invalidServoNumber) return;
     6ee:	98 81       	ld	r25, Y
     6f0:	89 81       	ldd	r24, Y+1	; 0x01
     6f2:	98 17       	cp	r25, r24
     6f4:	61 f1       	breq	.+88     	; 0x74e <_ZN9Servo8Bit5writeEj+0x7a>

    //for now, only accept angles, and angles that are between 0 and 200 degrees
    if( value > 180 )
     6f6:	65 3b       	cpi	r22, 0xB5	; 181
     6f8:	71 05       	cpc	r23, r1
     6fa:	10 f0       	brcs	.+4      	; 0x700 <_ZN9Servo8Bit5writeEj+0x2c>
    {
        //treat this number as microseconds
        writeMicroseconds( value );
     6fc:	ce 01       	movw	r24, r28
     6fe:	26 c0       	rjmp	.+76     	; 0x74c <_ZN9Servo8Bit5writeEj+0x78>
    }
    else
    {
        //treat this number as degrees
        uint16_t servoPulseLengthInUs = map(value, 0, 180, myMin, myMax);
     700:	00 d0       	rcall	.+0      	; 0x702 <_ZN9Servo8Bit5writeEj+0x2e>
     702:	00 d0       	rcall	.+0      	; 0x704 <_ZN9Servo8Bit5writeEj+0x30>
     704:	ab 01       	movw	r20, r22
     706:	60 e0       	ldi	r22, 0x00	; 0
     708:	70 e0       	ldi	r23, 0x00	; 0
     70a:	8a 80       	ldd	r8, Y+2	; 0x02
     70c:	9b 80       	ldd	r9, Y+3	; 0x03
     70e:	aa 24       	eor	r10, r10
     710:	bb 24       	eor	r11, r11
     712:	8c 81       	ldd	r24, Y+4	; 0x04
     714:	9d 81       	ldd	r25, Y+5	; 0x05
     716:	a0 e0       	ldi	r26, 0x00	; 0
     718:	b0 e0       	ldi	r27, 0x00	; 0
     71a:	ed b7       	in	r30, 0x3d	; 61
     71c:	fe b7       	in	r31, 0x3e	; 62
     71e:	81 83       	std	Z+1, r24	; 0x01
     720:	92 83       	std	Z+2, r25	; 0x02
     722:	a3 83       	std	Z+3, r26	; 0x03
     724:	b4 83       	std	Z+4, r27	; 0x04
     726:	ce 01       	movw	r24, r28
     728:	00 e0       	ldi	r16, 0x00	; 0
     72a:	10 e0       	ldi	r17, 0x00	; 0
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	e4 eb       	ldi	r30, 0xB4	; 180
     732:	ce 2e       	mov	r12, r30
     734:	d1 2c       	mov	r13, r1
     736:	e1 2c       	mov	r14, r1
     738:	f1 2c       	mov	r15, r1
     73a:	39 df       	rcall	.-398    	; 0x5ae <_ZN9Servo8Bit3mapElllll>
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0
     742:	0f 90       	pop	r0
     744:	9b 01       	movw	r18, r22
     746:	ac 01       	movw	r20, r24
        writeMicroseconds( servoPulseLengthInUs );
     748:	ce 01       	movw	r24, r28
     74a:	b9 01       	movw	r22, r18
     74c:	eb de       	rcall	.-554    	; 0x524 <_ZN9Servo8Bit17writeMicrosecondsEj>
    }
}//end write
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	1f 91       	pop	r17
     754:	0f 91       	pop	r16
     756:	ff 90       	pop	r15
     758:	ef 90       	pop	r14
     75a:	df 90       	pop	r13
     75c:	cf 90       	pop	r12
     75e:	bf 90       	pop	r11
     760:	af 90       	pop	r10
     762:	9f 90       	pop	r9
     764:	8f 90       	pop	r8
     766:	08 95       	ret

00000768 <_Z7readvccv>:
long readvcc()//http://digistump.com/wiki/digispark/quickref
{
  // Read 1.1V reference against AVcc
  // set the reference to Vcc and the measurement to the internal 1.1V reference

  ADMUX = _BV(MUX3) | _BV(MUX2);
     768:	8c e0       	ldi	r24, 0x0C	; 12
     76a:	87 b9       	out	0x07, r24	; 7
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     76c:	80 ea       	ldi	r24, 0xA0	; 160
     76e:	9f e0       	ldi	r25, 0x0F	; 15
     770:	01 97       	sbiw	r24, 0x01	; 1
     772:	f1 f7       	brne	.-4      	; 0x770 <_Z7readvccv+0x8>
  _delay_ms(2); // Wait for Vref to settle
  ADCSRA |= _BV(ADSC); // Start conversion
     774:	36 9a       	sbi	0x06, 6	; 6
  while (CHECKBIT(ADCSRA,ADSC)); // measuring
     776:	36 99       	sbic	0x06, 6	; 6
     778:	fe cf       	rjmp	.-4      	; 0x776 <_Z7readvccv+0xe>
 
  uint8_t low  = ADCL; // must read ADCL first - it then locks ADCH  
     77a:	84 b1       	in	r24, 0x04	; 4
   uint8_t high = ADCH; // unlocks both
     77c:	65 b1       	in	r22, 0x05	; 5
   long result = (high<<8) | low;
     77e:	36 2f       	mov	r19, r22
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	28 2b       	or	r18, r24
     786:	39 2b       	or	r19, r25
     788:	44 27       	eor	r20, r20
     78a:	37 fd       	sbrc	r19, 7
     78c:	40 95       	com	r20
     78e:	54 2f       	mov	r21, r20
     790:	64 eb       	ldi	r22, 0xB4	; 180
     792:	7b e2       	ldi	r23, 0x2B	; 43
     794:	81 e1       	ldi	r24, 0x11	; 17
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	c6 d5       	rcall	.+2956   	; 0x1326 <__divmodsi4>
     79a:	ca 01       	movw	r24, r20
  result = 1125300L / result; // Calculate Vcc (in mV); 1125300 = 1.1*1023*1000
  return result; // Vcc in millivolts
}
     79c:	b9 01       	movw	r22, r18
     79e:	08 95       	ret

000007a0 <_Z5lightj>:
  //}

}

 //if lower than 150 , else turn off
void light(uint16_t ftVal)
     7a0:	30 91 69 00 	lds	r19, 0x0069
{ ftVal<150 ? SETBIT(PORTB,LED):CLEARBIT(PORTB,LED);}
     7a4:	86 39       	cpi	r24, 0x96	; 150
     7a6:	91 05       	cpc	r25, r1
     7a8:	58 f4       	brcc	.+22     	; 0x7c0 <_Z5lightj+0x20>
     7aa:	28 b3       	in	r18, 0x18	; 24
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <_Z5lightj+0x16>
     7b2:	88 0f       	add	r24, r24
     7b4:	99 1f       	adc	r25, r25
     7b6:	3a 95       	dec	r19
     7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <_Z5lightj+0x12>
     7ba:	28 2b       	or	r18, r24
     7bc:	28 bb       	out	0x18, r18	; 24
     7be:	08 95       	ret
     7c0:	28 b3       	in	r18, 0x18	; 24
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	02 c0       	rjmp	.+4      	; 0x7cc <_Z5lightj+0x2c>
     7c8:	88 0f       	add	r24, r24
     7ca:	99 1f       	adc	r25, r25
     7cc:	3a 95       	dec	r19
     7ce:	e2 f7       	brpl	.-8      	; 0x7c8 <_Z5lightj+0x28>
     7d0:	80 95       	com	r24
     7d2:	82 23       	and	r24, r18
     7d4:	88 bb       	out	0x18, r24	; 24
     7d6:	08 95       	ret

000007d8 <_Z10moveMotor2h>:
  }
  moveMotor2(rangeType);
}
void moveMotor2(uint8_t pos) //break method into chunks to allow "multithreading"
{
  switch (pos)
     7d8:	e8 2f       	mov	r30, r24
     7da:	f0 e0       	ldi	r31, 0x00	; 0
     7dc:	e9 30       	cpi	r30, 0x09	; 9
     7de:	f1 05       	cpc	r31, r1
     7e0:	08 f0       	brcs	.+2      	; 0x7e4 <_Z10moveMotor2h+0xc>
     7e2:	74 c1       	rjmp	.+744    	; 0xacc <_Z10moveMotor2h+0x2f4>
     7e4:	e1 5f       	subi	r30, 0xF1	; 241
     7e6:	ff 4f       	sbci	r31, 0xFF	; 255
     7e8:	09 94       	ijmp
  {
    case 0:
      S1.writeMicroseconds(1500);
     7ea:	8e e9       	ldi	r24, 0x9E	; 158
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	6c ed       	ldi	r22, 0xDC	; 220
     7f0:	75 e0       	ldi	r23, 0x05	; 5
     7f2:	98 de       	rcall	.-720    	; 0x524 <_ZN9Servo8Bit17writeMicrosecondsEj>
      S2.writeMicroseconds(1500);
     7f4:	84 ea       	ldi	r24, 0xA4	; 164
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	6c ed       	ldi	r22, 0xDC	; 220
     7fa:	75 e0       	ldi	r23, 0x05	; 5
     7fc:	5b c1       	rjmp	.+694    	; 0xab4 <_Z10moveMotor2h+0x2dc>
      break;
	case 1:
      S1.writeMicroseconds(1500 - 300);
     7fe:	8e e9       	ldi	r24, 0x9E	; 158
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	60 eb       	ldi	r22, 0xB0	; 176
     804:	74 e0       	ldi	r23, 0x04	; 4
     806:	8e de       	rcall	.-740    	; 0x524 <_ZN9Servo8Bit17writeMicrosecondsEj>
      S2.writeMicroseconds(1500 + 300);
     808:	84 ea       	ldi	r24, 0xA4	; 164
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	68 e0       	ldi	r22, 0x08	; 8
     80e:	77 e0       	ldi	r23, 0x07	; 7
     810:	51 c1       	rjmp	.+674    	; 0xab4 <_Z10moveMotor2h+0x2dc>
      break;
    case 2:
      S1.writeMicroseconds(1500 + 300);
     812:	8e e9       	ldi	r24, 0x9E	; 158
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	68 e0       	ldi	r22, 0x08	; 8
     818:	77 e0       	ldi	r23, 0x07	; 7
     81a:	84 de       	rcall	.-760    	; 0x524 <_ZN9Servo8Bit17writeMicrosecondsEj>
      S2.writeMicroseconds(1500 - 300);
     81c:	84 ea       	ldi	r24, 0xA4	; 164
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	60 eb       	ldi	r22, 0xB0	; 176
     822:	74 e0       	ldi	r23, 0x04	; 4
     824:	47 c1       	rjmp	.+654    	; 0xab4 <_Z10moveMotor2h+0x2dc>
      break;
    case 3:
      S1.writeMicroseconds(1500 + 900);
     826:	8e e9       	ldi	r24, 0x9E	; 158
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	60 e6       	ldi	r22, 0x60	; 96
     82c:	79 e0       	ldi	r23, 0x09	; 9
     82e:	7a de       	rcall	.-780    	; 0x524 <_ZN9Servo8Bit17writeMicrosecondsEj>
      S2.writeMicroseconds(1500 - 900);
     830:	84 ea       	ldi	r24, 0xA4	; 164
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	68 e5       	ldi	r22, 0x58	; 88
     836:	72 e0       	ldi	r23, 0x02	; 2
     838:	3d c1       	rjmp	.+634    	; 0xab4 <_Z10moveMotor2h+0x2dc>
      break;
	case 4:
      S1.writeMicroseconds(1500 - 900);
     83a:	8e e9       	ldi	r24, 0x9E	; 158
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	68 e5       	ldi	r22, 0x58	; 88
     840:	72 e0       	ldi	r23, 0x02	; 2
     842:	04 c0       	rjmp	.+8      	; 0x84c <_Z10moveMotor2h+0x74>
      S2.writeMicroseconds(1500 + 900);
      break;
	case 5:
      S1.writeMicroseconds(1500 + 900);
     844:	8e e9       	ldi	r24, 0x9E	; 158
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	60 e6       	ldi	r22, 0x60	; 96
     84a:	79 e0       	ldi	r23, 0x09	; 9
     84c:	6b de       	rcall	.-810    	; 0x524 <_ZN9Servo8Bit17writeMicrosecondsEj>
      S2.writeMicroseconds(1500 + 900);
     84e:	84 ea       	ldi	r24, 0xA4	; 164
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	60 e6       	ldi	r22, 0x60	; 96
     854:	79 e0       	ldi	r23, 0x09	; 9
     856:	2e c1       	rjmp	.+604    	; 0xab4 <_Z10moveMotor2h+0x2dc>
      break;
    case 6:
      S1.writeMicroseconds(maxx * 10 + 600);
     858:	80 91 62 00 	lds	r24, 0x0062
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	6a e0       	ldi	r22, 0x0A	; 10
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	36 d5       	rcall	.+2668   	; 0x12d0 <__mulhi3>
     864:	bc 01       	movw	r22, r24
     866:	68 5a       	subi	r22, 0xA8	; 168
     868:	7d 4f       	sbci	r23, 0xFD	; 253
     86a:	8e e9       	ldi	r24, 0x9E	; 158
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	5a de       	rcall	.-844    	; 0x524 <_ZN9Servo8Bit17writeMicrosecondsEj>
      S2.writeMicroseconds((minn) * 10 + 600);
     870:	80 91 61 00 	lds	r24, 0x0061
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	6a e0       	ldi	r22, 0x0A	; 10
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	2a d5       	rcall	.+2644   	; 0x12d0 <__mulhi3>
     87c:	bc 01       	movw	r22, r24
     87e:	68 5a       	subi	r22, 0xA8	; 168
     880:	7d 4f       	sbci	r23, 0xFD	; 253
     882:	84 ea       	ldi	r24, 0xA4	; 164
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	4e de       	rcall	.-868    	; 0x524 <_ZN9Servo8Bit17writeMicrosecondsEj>
     888:	80 ed       	ldi	r24, 0xD0	; 208
     88a:	97 e0       	ldi	r25, 0x07	; 7
     88c:	28 ec       	ldi	r18, 0xC8	; 200
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	f9 01       	movw	r30, r18
     892:	31 97       	sbiw	r30, 0x01	; 1
     894:	f1 f7       	brne	.-4      	; 0x892 <_Z10moveMotor2h+0xba>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     896:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     898:	d9 f7       	brne	.-10     	; 0x890 <_Z10moveMotor2h+0xb8>
      _delay_ms(del);

      S1.writeMicroseconds(maxx * 10 + 600);
     89a:	80 91 62 00 	lds	r24, 0x0062
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	6a e0       	ldi	r22, 0x0A	; 10
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	15 d5       	rcall	.+2602   	; 0x12d0 <__mulhi3>
     8a6:	bc 01       	movw	r22, r24
     8a8:	68 5a       	subi	r22, 0xA8	; 168
     8aa:	7d 4f       	sbci	r23, 0xFD	; 253
     8ac:	8e e9       	ldi	r24, 0x9E	; 158
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	39 de       	rcall	.-910    	; 0x524 <_ZN9Servo8Bit17writeMicrosecondsEj>
      S2.writeMicroseconds((maxx) * 10 + 600);
     8b2:	80 91 62 00 	lds	r24, 0x0062
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	6a e0       	ldi	r22, 0x0A	; 10
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	09 d5       	rcall	.+2578   	; 0x12d0 <__mulhi3>
     8be:	bc 01       	movw	r22, r24
     8c0:	68 5a       	subi	r22, 0xA8	; 168
     8c2:	7d 4f       	sbci	r23, 0xFD	; 253
     8c4:	84 ea       	ldi	r24, 0xA4	; 164
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	2d de       	rcall	.-934    	; 0x524 <_ZN9Servo8Bit17writeMicrosecondsEj>
     8ca:	80 ed       	ldi	r24, 0xD0	; 208
     8cc:	97 e0       	ldi	r25, 0x07	; 7
     8ce:	28 ec       	ldi	r18, 0xC8	; 200
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	f9 01       	movw	r30, r18
     8d4:	31 97       	sbiw	r30, 0x01	; 1
     8d6:	f1 f7       	brne	.-4      	; 0x8d4 <_Z10moveMotor2h+0xfc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8da:	d9 f7       	brne	.-10     	; 0x8d2 <_Z10moveMotor2h+0xfa>
      _delay_ms(del);

      S1.writeMicroseconds(minn * 10 + 600);
     8dc:	80 91 61 00 	lds	r24, 0x0061
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	6a e0       	ldi	r22, 0x0A	; 10
     8e4:	70 e0       	ldi	r23, 0x00	; 0
     8e6:	f4 d4       	rcall	.+2536   	; 0x12d0 <__mulhi3>
     8e8:	bc 01       	movw	r22, r24
     8ea:	68 5a       	subi	r22, 0xA8	; 168
     8ec:	7d 4f       	sbci	r23, 0xFD	; 253
     8ee:	8e e9       	ldi	r24, 0x9E	; 158
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	18 de       	rcall	.-976    	; 0x524 <_ZN9Servo8Bit17writeMicrosecondsEj>
      S2.writeMicroseconds((maxx) * 10 + 600);
     8f4:	80 91 62 00 	lds	r24, 0x0062
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	6a e0       	ldi	r22, 0x0A	; 10
     8fc:	70 e0       	ldi	r23, 0x00	; 0
     8fe:	e8 d4       	rcall	.+2512   	; 0x12d0 <__mulhi3>
     900:	bc 01       	movw	r22, r24
     902:	68 5a       	subi	r22, 0xA8	; 168
     904:	7d 4f       	sbci	r23, 0xFD	; 253
     906:	84 ea       	ldi	r24, 0xA4	; 164
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0c de       	rcall	.-1000   	; 0x524 <_ZN9Servo8Bit17writeMicrosecondsEj>
     90c:	80 ed       	ldi	r24, 0xD0	; 208
     90e:	97 e0       	ldi	r25, 0x07	; 7
     910:	28 ec       	ldi	r18, 0xC8	; 200
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	f9 01       	movw	r30, r18
     916:	31 97       	sbiw	r30, 0x01	; 1
     918:	f1 f7       	brne	.-4      	; 0x916 <_Z10moveMotor2h+0x13e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     91a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     91c:	d9 f7       	brne	.-10     	; 0x914 <_Z10moveMotor2h+0x13c>
      _delay_ms(del);

      S1.writeMicroseconds(minn * 10 + 600);
     91e:	80 91 61 00 	lds	r24, 0x0061
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	6a e0       	ldi	r22, 0x0A	; 10
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	d3 d4       	rcall	.+2470   	; 0x12d0 <__mulhi3>
     92a:	bc 01       	movw	r22, r24
     92c:	68 5a       	subi	r22, 0xA8	; 168
     92e:	7d 4f       	sbci	r23, 0xFD	; 253
     930:	8e e9       	ldi	r24, 0x9E	; 158
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	f7 dd       	rcall	.-1042   	; 0x524 <_ZN9Servo8Bit17writeMicrosecondsEj>
      S2.writeMicroseconds((minn) * 10 + 600);
     936:	80 91 61 00 	lds	r24, 0x0061
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	6a e0       	ldi	r22, 0x0A	; 10
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	c7 d4       	rcall	.+2446   	; 0x12d0 <__mulhi3>
     942:	bc 01       	movw	r22, r24
     944:	68 5a       	subi	r22, 0xA8	; 168
     946:	7d 4f       	sbci	r23, 0xFD	; 253
     948:	84 ea       	ldi	r24, 0xA4	; 164
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	eb dd       	rcall	.-1066   	; 0x524 <_ZN9Servo8Bit17writeMicrosecondsEj>
     94e:	80 ed       	ldi	r24, 0xD0	; 208
     950:	97 e0       	ldi	r25, 0x07	; 7
     952:	28 ec       	ldi	r18, 0xC8	; 200
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	f9 01       	movw	r30, r18
     958:	31 97       	sbiw	r30, 0x01	; 1
     95a:	f1 f7       	brne	.-4      	; 0x958 <_Z10moveMotor2h+0x180>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     95c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     95e:	d9 f7       	brne	.-10     	; 0x956 <_Z10moveMotor2h+0x17e>
      _delay_ms(del);

      S1.writeMicroseconds(maxx * 10 + 600);
     960:	80 91 62 00 	lds	r24, 0x0062
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	6a e0       	ldi	r22, 0x0A	; 10
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	b2 d4       	rcall	.+2404   	; 0x12d0 <__mulhi3>
     96c:	bc 01       	movw	r22, r24
     96e:	68 5a       	subi	r22, 0xA8	; 168
     970:	7d 4f       	sbci	r23, 0xFD	; 253
     972:	8e e9       	ldi	r24, 0x9E	; 158
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	d6 dd       	rcall	.-1108   	; 0x524 <_ZN9Servo8Bit17writeMicrosecondsEj>
      S2.writeMicroseconds((minn) * 10 + 600);
     978:	80 91 61 00 	lds	r24, 0x0061
     97c:	92 c0       	rjmp	.+292    	; 0xaa2 <_Z10moveMotor2h+0x2ca>
      //_delay_ms(del);
      break;
    case 7:
      S1.writeMicroseconds(maxx * 10 + 600);
     97e:	80 91 62 00 	lds	r24, 0x0062
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	6a e0       	ldi	r22, 0x0A	; 10
     986:	70 e0       	ldi	r23, 0x00	; 0
     988:	a3 d4       	rcall	.+2374   	; 0x12d0 <__mulhi3>
     98a:	bc 01       	movw	r22, r24
     98c:	68 5a       	subi	r22, 0xA8	; 168
     98e:	7d 4f       	sbci	r23, 0xFD	; 253
     990:	8e e9       	ldi	r24, 0x9E	; 158
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	c7 dd       	rcall	.-1138   	; 0x524 <_ZN9Servo8Bit17writeMicrosecondsEj>
      S2.writeMicroseconds((midd) * 10 + 600);
     996:	80 91 63 00 	lds	r24, 0x0063
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	6a e0       	ldi	r22, 0x0A	; 10
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	97 d4       	rcall	.+2350   	; 0x12d0 <__mulhi3>
     9a2:	bc 01       	movw	r22, r24
     9a4:	68 5a       	subi	r22, 0xA8	; 168
     9a6:	7d 4f       	sbci	r23, 0xFD	; 253
     9a8:	84 ea       	ldi	r24, 0xA4	; 164
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	bb dd       	rcall	.-1162   	; 0x524 <_ZN9Servo8Bit17writeMicrosecondsEj>
     9ae:	80 ed       	ldi	r24, 0xD0	; 208
     9b0:	97 e0       	ldi	r25, 0x07	; 7
     9b2:	28 ec       	ldi	r18, 0xC8	; 200
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	f9 01       	movw	r30, r18
     9b8:	31 97       	sbiw	r30, 0x01	; 1
     9ba:	f1 f7       	brne	.-4      	; 0x9b8 <_Z10moveMotor2h+0x1e0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9be:	d9 f7       	brne	.-10     	; 0x9b6 <_Z10moveMotor2h+0x1de>
      _delay_ms(del);
      S1.writeMicroseconds(midd * 10 + 600);
     9c0:	80 91 63 00 	lds	r24, 0x0063
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	6a e0       	ldi	r22, 0x0A	; 10
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	82 d4       	rcall	.+2308   	; 0x12d0 <__mulhi3>
     9cc:	bc 01       	movw	r22, r24
     9ce:	68 5a       	subi	r22, 0xA8	; 168
     9d0:	7d 4f       	sbci	r23, 0xFD	; 253
     9d2:	8e e9       	ldi	r24, 0x9E	; 158
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	a6 dd       	rcall	.-1204   	; 0x524 <_ZN9Servo8Bit17writeMicrosecondsEj>
      S2.writeMicroseconds((maxx) * 10 + 600);
     9d8:	80 91 62 00 	lds	r24, 0x0062
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	6a e0       	ldi	r22, 0x0A	; 10
     9e0:	70 e0       	ldi	r23, 0x00	; 0
     9e2:	76 d4       	rcall	.+2284   	; 0x12d0 <__mulhi3>
     9e4:	bc 01       	movw	r22, r24
     9e6:	68 5a       	subi	r22, 0xA8	; 168
     9e8:	7d 4f       	sbci	r23, 0xFD	; 253
     9ea:	84 ea       	ldi	r24, 0xA4	; 164
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	9a dd       	rcall	.-1228   	; 0x524 <_ZN9Servo8Bit17writeMicrosecondsEj>
     9f0:	80 ed       	ldi	r24, 0xD0	; 208
     9f2:	97 e0       	ldi	r25, 0x07	; 7
     9f4:	28 ec       	ldi	r18, 0xC8	; 200
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	f9 01       	movw	r30, r18
     9fa:	31 97       	sbiw	r30, 0x01	; 1
     9fc:	f1 f7       	brne	.-4      	; 0x9fa <_Z10moveMotor2h+0x222>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a00:	d9 f7       	brne	.-10     	; 0x9f8 <_Z10moveMotor2h+0x220>
      _delay_ms(del);
      S1.writeMicroseconds(minn * 10 + 600);
     a02:	80 91 61 00 	lds	r24, 0x0061
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	6a e0       	ldi	r22, 0x0A	; 10
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	61 d4       	rcall	.+2242   	; 0x12d0 <__mulhi3>
     a0e:	bc 01       	movw	r22, r24
     a10:	68 5a       	subi	r22, 0xA8	; 168
     a12:	7d 4f       	sbci	r23, 0xFD	; 253
     a14:	8e e9       	ldi	r24, 0x9E	; 158
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	85 dd       	rcall	.-1270   	; 0x524 <_ZN9Servo8Bit17writeMicrosecondsEj>
      S2.writeMicroseconds((midd) * 10 + 600);
     a1a:	80 91 63 00 	lds	r24, 0x0063
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	6a e0       	ldi	r22, 0x0A	; 10
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	55 d4       	rcall	.+2218   	; 0x12d0 <__mulhi3>
     a26:	bc 01       	movw	r22, r24
     a28:	68 5a       	subi	r22, 0xA8	; 168
     a2a:	7d 4f       	sbci	r23, 0xFD	; 253
     a2c:	84 ea       	ldi	r24, 0xA4	; 164
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	79 dd       	rcall	.-1294   	; 0x524 <_ZN9Servo8Bit17writeMicrosecondsEj>
     a32:	80 ed       	ldi	r24, 0xD0	; 208
     a34:	97 e0       	ldi	r25, 0x07	; 7
     a36:	28 ec       	ldi	r18, 0xC8	; 200
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	f9 01       	movw	r30, r18
     a3c:	31 97       	sbiw	r30, 0x01	; 1
     a3e:	f1 f7       	brne	.-4      	; 0xa3c <_Z10moveMotor2h+0x264>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a40:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a42:	d9 f7       	brne	.-10     	; 0xa3a <_Z10moveMotor2h+0x262>
      _delay_ms(del);
      S1.writeMicroseconds(midd * 10 + 600);
     a44:	80 91 63 00 	lds	r24, 0x0063
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	6a e0       	ldi	r22, 0x0A	; 10
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	40 d4       	rcall	.+2176   	; 0x12d0 <__mulhi3>
     a50:	bc 01       	movw	r22, r24
     a52:	68 5a       	subi	r22, 0xA8	; 168
     a54:	7d 4f       	sbci	r23, 0xFD	; 253
     a56:	8e e9       	ldi	r24, 0x9E	; 158
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	64 dd       	rcall	.-1336   	; 0x524 <_ZN9Servo8Bit17writeMicrosecondsEj>
      S2.writeMicroseconds((minn) * 10 + 600);
     a5c:	80 91 61 00 	lds	r24, 0x0061
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	6a e0       	ldi	r22, 0x0A	; 10
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	34 d4       	rcall	.+2152   	; 0x12d0 <__mulhi3>
     a68:	bc 01       	movw	r22, r24
     a6a:	68 5a       	subi	r22, 0xA8	; 168
     a6c:	7d 4f       	sbci	r23, 0xFD	; 253
     a6e:	84 ea       	ldi	r24, 0xA4	; 164
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	58 dd       	rcall	.-1360   	; 0x524 <_ZN9Servo8Bit17writeMicrosecondsEj>
     a74:	80 ed       	ldi	r24, 0xD0	; 208
     a76:	97 e0       	ldi	r25, 0x07	; 7
     a78:	28 ec       	ldi	r18, 0xC8	; 200
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	f9 01       	movw	r30, r18
     a7e:	31 97       	sbiw	r30, 0x01	; 1
     a80:	f1 f7       	brne	.-4      	; 0xa7e <_Z10moveMotor2h+0x2a6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a82:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a84:	d9 f7       	brne	.-10     	; 0xa7c <_Z10moveMotor2h+0x2a4>
      _delay_ms(del);
      S1.writeMicroseconds(maxx * 10 + 600);
     a86:	80 91 62 00 	lds	r24, 0x0062
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	6a e0       	ldi	r22, 0x0A	; 10
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	1f d4       	rcall	.+2110   	; 0x12d0 <__mulhi3>
     a92:	bc 01       	movw	r22, r24
     a94:	68 5a       	subi	r22, 0xA8	; 168
     a96:	7d 4f       	sbci	r23, 0xFD	; 253
     a98:	8e e9       	ldi	r24, 0x9E	; 158
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	43 dd       	rcall	.-1402   	; 0x524 <_ZN9Servo8Bit17writeMicrosecondsEj>
      S2.writeMicroseconds((midd) * 10 + 600);
     a9e:	80 91 63 00 	lds	r24, 0x0063
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	6a e0       	ldi	r22, 0x0A	; 10
     aa6:	70 e0       	ldi	r23, 0x00	; 0
     aa8:	13 d4       	rcall	.+2086   	; 0x12d0 <__mulhi3>
     aaa:	bc 01       	movw	r22, r24
     aac:	68 5a       	subi	r22, 0xA8	; 168
     aae:	7d 4f       	sbci	r23, 0xFD	; 253
     ab0:	84 ea       	ldi	r24, 0xA4	; 164
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	37 dd       	rcall	.-1426   	; 0x524 <_ZN9Servo8Bit17writeMicrosecondsEj>
     ab6:	08 95       	ret
      //_delay_ms(del/2);
      break;
	case 8:
      S1.writeMicroseconds(1500 + 900);
     ab8:	8e e9       	ldi	r24, 0x9E	; 158
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	60 e6       	ldi	r22, 0x60	; 96
     abe:	79 e0       	ldi	r23, 0x09	; 9
     ac0:	31 dd       	rcall	.-1438   	; 0x524 <_ZN9Servo8Bit17writeMicrosecondsEj>
      S2.writeMicroseconds(1500 - 900);
     ac2:	84 ea       	ldi	r24, 0xA4	; 164
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	68 e5       	ldi	r22, 0x58	; 88
     ac8:	72 e0       	ldi	r23, 0x02	; 2
     aca:	2c dd       	rcall	.-1448   	; 0x524 <_ZN9Servo8Bit17writeMicrosecondsEj>
     acc:	08 95       	ret

00000ace <_Z8getRangej>:

 //if lower than 150 , else turn off
void light(uint16_t ftVal)
{ ftVal<150 ? SETBIT(PORTB,LED):CLEARBIT(PORTB,LED);}
 
void getRange(uint16_t ftVal)// at thresh = 50, thresh = 216-433-650
     ace:	fc 01       	movw	r30, r24
{
	rangeType=0; 
	
	if (ftVal < thresh)                            
     ad0:	80 91 68 00 	lds	r24, 0x0068
     ad4:	28 2f       	mov	r18, r24
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	e2 17       	cp	r30, r18
     ada:	f3 07       	cpc	r31, r19
     adc:	28 f4       	brcc	.+10     	; 0xae8 <_Z8getRangej+0x1a>
		rangeType = 0;
     ade:	10 92 8f 00 	sts	0x008F, r1
     ae2:	10 92 8e 00 	sts	0x008E, r1
     ae6:	38 c0       	rjmp	.+112    	; 0xb58 <_Z8getRangej+0x8a>
	else if ((ftVal >= thresh)&&(ftVal <2*thresh)) //216
     ae8:	c9 01       	movw	r24, r18
     aea:	88 0f       	add	r24, r24
     aec:	99 1f       	adc	r25, r25
     aee:	e8 17       	cp	r30, r24
     af0:	f9 07       	cpc	r31, r25
     af2:	18 f4       	brcc	.+6      	; 0xafa <_Z8getRangej+0x2c>
		rangeType = 2;
     af4:	82 e0       	ldi	r24, 0x02	; 2
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	2b c0       	rjmp	.+86     	; 0xb50 <_Z8getRangej+0x82>
	else if ((ftVal>= 2*thresh)&&(ftVal< 3*thresh))//216-433
     afa:	c9 01       	movw	r24, r18
     afc:	63 e0       	ldi	r22, 0x03	; 3
     afe:	70 e0       	ldi	r23, 0x00	; 0
     b00:	e7 d3       	rcall	.+1998   	; 0x12d0 <__mulhi3>
     b02:	e8 17       	cp	r30, r24
     b04:	f9 07       	cpc	r31, r25
     b06:	18 f4       	brcc	.+6      	; 0xb0e <_Z8getRangej+0x40>
		rangeType = 3;
     b08:	83 e0       	ldi	r24, 0x03	; 3
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	21 c0       	rjmp	.+66     	; 0xb50 <_Z8getRangej+0x82>
	else if ((ftVal>=3*thresh) && (ftVal<4*thresh))//433-650
     b0e:	c9 01       	movw	r24, r18
     b10:	88 0f       	add	r24, r24
     b12:	99 1f       	adc	r25, r25
     b14:	88 0f       	add	r24, r24
     b16:	99 1f       	adc	r25, r25
     b18:	e8 17       	cp	r30, r24
     b1a:	f9 07       	cpc	r31, r25
     b1c:	18 f4       	brcc	.+6      	; 0xb24 <_Z8getRangej+0x56>
		rangeType = 4;
     b1e:	84 e0       	ldi	r24, 0x04	; 4
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	16 c0       	rjmp	.+44     	; 0xb50 <_Z8getRangej+0x82>
	else if ((ftVal>=4*thresh) && (ftVal<5*thresh))//433-650
     b24:	c9 01       	movw	r24, r18
     b26:	65 e0       	ldi	r22, 0x05	; 5
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	d2 d3       	rcall	.+1956   	; 0x12d0 <__mulhi3>
     b2c:	e8 17       	cp	r30, r24
     b2e:	f9 07       	cpc	r31, r25
     b30:	18 f4       	brcc	.+6      	; 0xb38 <_Z8getRangej+0x6a>
		rangeType = 5;
     b32:	85 e0       	ldi	r24, 0x05	; 5
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	0c c0       	rjmp	.+24     	; 0xb50 <_Z8getRangej+0x82>
	else if ((ftVal>=5*thresh) && (ftVal<6*thresh))//433-650
     b38:	c9 01       	movw	r24, r18
     b3a:	66 e0       	ldi	r22, 0x06	; 6
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	c8 d3       	rcall	.+1936   	; 0x12d0 <__mulhi3>
     b40:	e8 17       	cp	r30, r24
     b42:	f9 07       	cpc	r31, r25
     b44:	18 f4       	brcc	.+6      	; 0xb4c <_Z8getRangej+0x7e>
		rangeType = 6;
     b46:	86 e0       	ldi	r24, 0x06	; 6
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	02 c0       	rjmp	.+4      	; 0xb50 <_Z8getRangej+0x82>
	else                                           //>650                                         
		rangeType = 7;
     b4c:	87 e0       	ldi	r24, 0x07	; 7
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	90 93 8f 00 	sts	0x008F, r25
     b54:	80 93 8e 00 	sts	0x008E, r24

  if (rangeType != prevVal)
     b58:	20 91 8e 00 	lds	r18, 0x008E
     b5c:	30 91 8f 00 	lds	r19, 0x008F
     b60:	80 91 86 00 	lds	r24, 0x0086
     b64:	90 91 87 00 	lds	r25, 0x0087
     b68:	28 17       	cp	r18, r24
     b6a:	39 07       	cpc	r19, r25
     b6c:	81 f0       	breq	.+32     	; 0xb8e <_Z8getRangej+0xc0>
  {
    prevVal = rangeType;
     b6e:	30 93 87 00 	sts	0x0087, r19
     b72:	20 93 86 00 	sts	0x0086, r18
    matchCount=0;
     b76:	10 92 85 00 	sts	0x0085, r1
     b7a:	80 ed       	ldi	r24, 0xD0	; 208
     b7c:	97 e0       	ldi	r25, 0x07	; 7
     b7e:	28 ec       	ldi	r18, 0xC8	; 200
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	f9 01       	movw	r30, r18
     b84:	31 97       	sbiw	r30, 0x01	; 1
     b86:	f1 f7       	brne	.-4      	; 0xb84 <_Z8getRangej+0xb6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b88:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b8a:	d9 f7       	brne	.-10     	; 0xb82 <_Z8getRangej+0xb4>
     b8c:	08 95       	ret
    _delay_ms(del);
    return;
  }
  matchCount++;
     b8e:	80 91 85 00 	lds	r24, 0x0085
     b92:	8f 5f       	subi	r24, 0xFF	; 255
     b94:	80 93 85 00 	sts	0x0085, r24
  prevVal = rangeType;
     b98:	30 93 87 00 	sts	0x0087, r19
     b9c:	20 93 86 00 	sts	0x0086, r18
  
  if(matchCount < 2 )
     ba0:	82 30       	cpi	r24, 0x02	; 2
     ba2:	50 f4       	brcc	.+20     	; 0xbb8 <_Z8getRangej+0xea>
     ba4:	80 ed       	ldi	r24, 0xD0	; 208
     ba6:	97 e0       	ldi	r25, 0x07	; 7
     ba8:	28 ec       	ldi	r18, 0xC8	; 200
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	f9 01       	movw	r30, r18
     bae:	31 97       	sbiw	r30, 0x01	; 1
     bb0:	f1 f7       	brne	.-4      	; 0xbae <_Z8getRangej+0xe0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bb2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bb4:	d9 f7       	brne	.-10     	; 0xbac <_Z8getRangej+0xde>
     bb6:	08 95       	ret
  {
    _delay_ms(del);
    return;
  }
  moveMotor2(rangeType);
     bb8:	82 2f       	mov	r24, r18
     bba:	0e de       	rcall	.-996    	; 0x7d8 <_Z10moveMotor2h>
     bbc:	08 95       	ret

00000bbe <_Z11currentReadj>:

void currentRead(uint16_t mm) //fix and determine way to make current read amount more related to current rather than heuristic
{
  //if (millis() - 500 > oldTime)
 //{
    if (mm < 5)
     bbe:	05 97       	sbiw	r24, 0x05	; 5
     bc0:	18 f4       	brcc	.+6      	; 0xbc8 <_Z11currentReadj+0xa>
    {
      //write led low  //digitalWrite(LED, LOW);
      //CLEARBIT(PORTB,LED);//PORTB &= ~(1 << LED);
	  
      //moveMotor2(stress);
	  stressCount = 0;
     bc2:	10 92 9b 00 	sts	0x009B, r1
     bc6:	08 95       	ret
    }
    else
    {
      //write led high     digitalWrite(LED, HIGH);
      //SETBIT(PORTB,LED);//PORTB |= (1 << LED);
	  stressCount++;
     bc8:	80 91 9b 00 	lds	r24, 0x009B
     bcc:	8f 5f       	subi	r24, 0xFF	; 255
     bce:	80 93 9b 00 	sts	0x009B, r24
	  if(stressCount>=stressMoveThresh)
     bd2:	83 30       	cpi	r24, 0x03	; 3
     bd4:	b0 f0       	brcs	.+44     	; 0xc02 <_Z11currentReadj+0x44>
	  {
		(stress > 2 ? stress=0 : (stress++));
     bd6:	80 91 9a 00 	lds	r24, 0x009A
     bda:	83 30       	cpi	r24, 0x03	; 3
     bdc:	18 f0       	brcs	.+6      	; 0xbe4 <_Z11currentReadj+0x26>
     bde:	10 92 9a 00 	sts	0x009A, r1
     be2:	03 c0       	rjmp	.+6      	; 0xbea <_Z11currentReadj+0x2c>
     be4:	8f 5f       	subi	r24, 0xFF	; 255
     be6:	80 93 9a 00 	sts	0x009A, r24
		moveMotor2(stress);
     bea:	80 91 9a 00 	lds	r24, 0x009A
     bee:	f4 dd       	rcall	.-1048   	; 0x7d8 <_Z10moveMotor2h>
     bf0:	80 ed       	ldi	r24, 0xD0	; 208
     bf2:	97 e0       	ldi	r25, 0x07	; 7
     bf4:	28 ec       	ldi	r18, 0xC8	; 200
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	f9 01       	movw	r30, r18
     bfa:	31 97       	sbiw	r30, 0x01	; 1
     bfc:	f1 f7       	brne	.-4      	; 0xbfa <_Z11currentReadj+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bfe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c00:	d9 f7       	brne	.-10     	; 0xbf8 <_Z11currentReadj+0x3a>
     c02:	08 95       	ret

00000c04 <_Z7initADCh>:
}
void initADC(uint8_t PRESCALE)
{
  //attiny datasheet 17.13.2 p136
  //ADCSRA = (1 << ADEN) | (1 << ADPS2)| (1<<ADPS1); //Rrescaler div =64
  SETBIT(ADCSRA,ADEN);
     c04:	37 9a       	sbi	0x06, 7	; 6
  //#ADCSRA |= PRESCALE;
  SETBITMASK(ADCSRA,PRESCALE);
     c06:	96 b1       	in	r25, 0x06	; 6
     c08:	98 2b       	or	r25, r24
     c0a:	96 b9       	out	0x06, r25	; 6
}
     c0c:	08 95       	ret

00000c0e <_Z7ReadADChh>:
//10bit conversion replaces analogread command
//https://github.com/kehribar/proper-tiny-arduino/blob/master/pta/analog.c
uint16_t ReadADC(uint8_t channel,uint8_t refs)
{
  //attiny datasheet 17.5 p126
  ADMUX=0;
     c0e:	17 b8       	out	0x07, r1	; 7
  //SETBIT(ADMUX,refs);
  SETBITMASK(ADMUX,channel);  
     c10:	97 b1       	in	r25, 0x07	; 7
     c12:	98 2b       	or	r25, r24
     c14:	97 b9       	out	0x07, r25	; 7
  //Start Single conversion (vs continuous auto-trigger)
  SETBIT(ADCSRA,ADSC); //ADCSRA |= (1 << ADSC);
     c16:	36 9a       	sbi	0x06, 6	; 6
// 
  //Wait for conversion to complete 
  while(CHECKBIT(ADCSRA,ADSC));
     c18:	36 99       	sbic	0x06, 6	; 6
     c1a:	fe cf       	rjmp	.-4      	; 0xc18 <_Z7ReadADChh+0xa>
  //Set ADIF to 1 to clear bin in IO standard way of clearing adif see 
  SETBIT(ADCSRA,ADIF);//ADCSRA |= (1 << ADIF); 17.4 p124 of datasheet
     c1c:	34 9a       	sbi	0x06, 4	; 6
     c1e:	80 e9       	ldi	r24, 0x90	; 144
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <_Z7ReadADChh+0x14>
  _delay_us(200);
  return(ADC);
     c26:	24 b1       	in	r18, 0x04	; 4
     c28:	35 b1       	in	r19, 0x05	; 5
}
     c2a:	c9 01       	movw	r24, r18
     c2c:	08 95       	ret

00000c2e <main>:
void initADC(uint8_t PRESCALE);

uint16_t ReadADC(uint8_t channel,uint8_t refs);
uint16_t mapp(double in, double in_min,double in_max, double out_min, double out_max);
//inline void digWrite(int channel, bool state);
int main(void)
     c2e:	cf 92       	push	r12
     c30:	df 92       	push	r13
     c32:	ef 92       	push	r14
     c34:	ff 92       	push	r15
     c36:	0f 93       	push	r16
     c38:	1f 93       	push	r17
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
{
  //DDRB 0=analog 1= analog
  DDRB = 0xff; //set all pins to input
     c3e:	8f ef       	ldi	r24, 0xFF	; 255
     c40:	87 bb       	out	0x17, r24	; 23
  DDRB = (1 << SP1) | (1 << SP2) | (1 << LED);//Set pin 0,4,1
     c42:	60 91 6d 00 	lds	r22, 0x006D
     c46:	21 e0       	ldi	r18, 0x01	; 1
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	f9 01       	movw	r30, r18
     c4c:	00 90 69 00 	lds	r0, 0x0069
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <main+0x28>
     c52:	ee 0f       	add	r30, r30
     c54:	ff 1f       	adc	r31, r31
     c56:	0a 94       	dec	r0
     c58:	e2 f7       	brpl	.-8      	; 0xc52 <main+0x24>
     c5a:	c9 01       	movw	r24, r18
     c5c:	00 90 6a 00 	lds	r0, 0x006A
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <main+0x38>
     c62:	88 0f       	add	r24, r24
     c64:	99 1f       	adc	r25, r25
     c66:	0a 94       	dec	r0
     c68:	e2 f7       	brpl	.-8      	; 0xc62 <main+0x34>
     c6a:	a9 01       	movw	r20, r18
     c6c:	06 2e       	mov	r0, r22
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <main+0x46>
     c70:	44 0f       	add	r20, r20
     c72:	55 1f       	adc	r21, r21
     c74:	0a 94       	dec	r0
     c76:	e2 f7       	brpl	.-8      	; 0xc70 <main+0x42>
     c78:	84 2b       	or	r24, r20
     c7a:	8e 2b       	or	r24, r30
     c7c:	87 bb       	out	0x17, r24	; 23
  CLEARBIT(DDRB,currP);
     c7e:	47 b3       	in	r20, 0x17	; 23
     c80:	c9 01       	movw	r24, r18
     c82:	00 90 6c 00 	lds	r0, 0x006C
     c86:	02 c0       	rjmp	.+4      	; 0xc8c <main+0x5e>
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	0a 94       	dec	r0
     c8e:	e2 f7       	brpl	.-8      	; 0xc88 <main+0x5a>
     c90:	80 95       	com	r24
     c92:	84 23       	and	r24, r20
     c94:	87 bb       	out	0x17, r24	; 23
  CLEARBIT(DDRB,mic);
     c96:	87 b3       	in	r24, 0x17	; 23
     c98:	00 90 6b 00 	lds	r0, 0x006B
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <main+0x74>
     c9e:	22 0f       	add	r18, r18
     ca0:	33 1f       	adc	r19, r19
     ca2:	0a 94       	dec	r0
     ca4:	e2 f7       	brpl	.-8      	; 0xc9e <main+0x70>
     ca6:	20 95       	com	r18
     ca8:	28 23       	and	r18, r24
     caa:	27 bb       	out	0x17, r18	; 23
  CLEARBIT(PORTB, LED); //turn off
     cac:	88 b3       	in	r24, 0x18	; 24
     cae:	e0 95       	com	r30
     cb0:	e8 23       	and	r30, r24
     cb2:	e8 bb       	out	0x18, r30	; 24
}
void initADC(uint8_t PRESCALE)
{
  //attiny datasheet 17.13.2 p136
  //ADCSRA = (1 << ADEN) | (1 << ADPS2)| (1<<ADPS1); //Rrescaler div =64
  SETBIT(ADCSRA,ADEN);
     cb4:	37 9a       	sbi	0x06, 7	; 6
  //#ADCSRA |= PRESCALE;
  SETBITMASK(ADCSRA,PRESCALE);
     cb6:	32 9a       	sbi	0x06, 2	; 6
  //  pinMode(mic, INPUT);
  //  pinMode(LED, OUTPUT);

  initADC(PRESCALE_16);

  S1.attach(SP1);
     cb8:	8e e9       	ldi	r24, 0x9E	; 158
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	e0 db       	rcall	.-2112   	; 0x47e <_ZN9Servo8Bit6attachEh>
  S2.attach(SP2);
     cbe:	84 ea       	ldi	r24, 0xA4	; 164
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	60 91 6a 00 	lds	r22, 0x006A
     cc6:	db db       	rcall	.-2122   	; 0x47e <_ZN9Servo8Bit6attachEh>
		micMean >>= 6; // take average of 1>>6 values to determine microphone mean
	 newVal = ReadADC(mic,REFVCC);
	 
	 ////////////////
	 //after new smarticle I don't need above loop can just use 512
  for (int i = 0; i < 1<<samps; i++)
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	c8 2e       	mov	r12, r24
     ccc:	d1 2c       	mov	r13, r1
     cce:	08 ec       	ldi	r16, 0xC8	; 200
     cd0:	e0 2e       	mov	r14, r16
     cd2:	f1 2c       	mov	r15, r1
  S2.attach(SP2);
  // ADMUX |= _BV( REFS1 );  // Set Ref voltage

while(1)
{
  midPtCross = 0;
     cd4:	10 92 95 00 	sts	0x0095, r1
     cd8:	10 92 94 00 	sts	0x0094, r1
  meanCurr = 0;
     cdc:	10 92 93 00 	sts	0x0093, r1
     ce0:	10 92 92 00 	sts	0x0092, r1
  micMean = 0;
     ce4:	10 92 65 00 	sts	0x0065, r1
     ce8:	10 92 64 00 	sts	0x0064, r1
     cec:	c0 e0       	ldi	r28, 0x00	; 0
     cee:	d0 e0       	ldi	r29, 0x00	; 0
	//}
////////////

for (int j = 0; j < 1<<6; j++)
	{
		micMean = micMean+ReadADC(mic,REFVCC);
     cf0:	00 91 64 00 	lds	r16, 0x0064
     cf4:	10 91 65 00 	lds	r17, 0x0065
     cf8:	80 91 6b 00 	lds	r24, 0x006B
     cfc:	60 e0       	ldi	r22, 0x00	; 0
     cfe:	87 df       	rcall	.-242    	; 0xc0e <_Z7ReadADChh>
     d00:	80 0f       	add	r24, r16
     d02:	91 1f       	adc	r25, r17
     d04:	90 93 65 00 	sts	0x0065, r25
     d08:	80 93 64 00 	sts	0x0064, r24
  //{
	//CLEARBIT(PORTB,LED);
	//}
////////////

for (int j = 0; j < 1<<6; j++)
     d0c:	21 96       	adiw	r28, 0x01	; 1
     d0e:	c0 34       	cpi	r28, 0x40	; 64
     d10:	d1 05       	cpc	r29, r1
     d12:	71 f7       	brne	.-36     	; 0xcf0 <main+0xc2>
	{
		micMean = micMean+ReadADC(mic,REFVCC);
	}
		micMean >>= 6; // take average of 1>>6 values to determine microphone mean
     d14:	16 e0       	ldi	r17, 0x06	; 6
     d16:	96 95       	lsr	r25
     d18:	87 95       	ror	r24
     d1a:	1a 95       	dec	r17
     d1c:	e1 f7       	brne	.-8      	; 0xd16 <main+0xe8>
     d1e:	90 93 65 00 	sts	0x0065, r25
     d22:	80 93 64 00 	sts	0x0064, r24
	 newVal = ReadADC(mic,REFVCC);
     d26:	80 91 6b 00 	lds	r24, 0x006B
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	70 df       	rcall	.-288    	; 0xc0e <_Z7ReadADChh>
     d2e:	90 93 8d 00 	sts	0x008D, r25
     d32:	80 93 8c 00 	sts	0x008C, r24
     d36:	c0 e0       	ldi	r28, 0x00	; 0
     d38:	d0 e0       	ldi	r29, 0x00	; 0
     d3a:	54 c0       	rjmp	.+168    	; 0xde4 <main+0x1b6>
	 
	 ////////////////
	 //after new smarticle I don't need above loop can just use 512
  for (int i = 0; i < 1<<samps; i++)
 {
	oldVal  = newVal;
     d3c:	80 91 8c 00 	lds	r24, 0x008C
     d40:	90 91 8d 00 	lds	r25, 0x008D
     d44:	90 93 8b 00 	sts	0x008B, r25
     d48:	80 93 8a 00 	sts	0x008A, r24
    curr    = ReadADC(currP,REFVCC);
     d4c:	80 91 6c 00 	lds	r24, 0x006C
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	5d df       	rcall	.-326    	; 0xc0e <_Z7ReadADChh>
     d54:	90 93 89 00 	sts	0x0089, r25
     d58:	80 93 88 00 	sts	0x0088, r24
	newVal  = ReadADC(mic,REFVCC);
     d5c:	80 91 6b 00 	lds	r24, 0x006B
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	55 df       	rcall	.-342    	; 0xc0e <_Z7ReadADChh>
     d64:	90 93 8d 00 	sts	0x008D, r25
     d68:	80 93 8c 00 	sts	0x008C, r24
    meanCurr = meanCurr + curr;
     d6c:	20 91 92 00 	lds	r18, 0x0092
     d70:	30 91 93 00 	lds	r19, 0x0093
     d74:	40 91 88 00 	lds	r20, 0x0088
     d78:	50 91 89 00 	lds	r21, 0x0089
     d7c:	24 0f       	add	r18, r20
     d7e:	35 1f       	adc	r19, r21
     d80:	30 93 93 00 	sts	0x0093, r19
     d84:	20 93 92 00 	sts	0x0092, r18
	diff = (newVal > micMean) - (oldVal > micMean);
     d88:	40 91 64 00 	lds	r20, 0x0064
     d8c:	50 91 65 00 	lds	r21, 0x0065
     d90:	60 e0       	ldi	r22, 0x00	; 0
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	48 17       	cp	r20, r24
     d96:	59 07       	cpc	r21, r25
     d98:	10 f4       	brcc	.+4      	; 0xd9e <main+0x170>
     d9a:	61 e0       	ldi	r22, 0x01	; 1
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	80 91 8a 00 	lds	r24, 0x008A
     da6:	90 91 8b 00 	lds	r25, 0x008B
     daa:	48 17       	cp	r20, r24
     dac:	59 07       	cpc	r21, r25
     dae:	10 f4       	brcc	.+4      	; 0xdb4 <main+0x186>
     db0:	21 e0       	ldi	r18, 0x01	; 1
     db2:	30 e0       	ldi	r19, 0x00	; 0
    //diff = abs(diff);
	diff = myabs(diff);	
     db4:	cb 01       	movw	r24, r22
     db6:	82 1b       	sub	r24, r18
     db8:	93 0b       	sbc	r25, r19
     dba:	9c 01       	movw	r18, r24
     dbc:	97 ff       	sbrs	r25, 7
     dbe:	03 c0       	rjmp	.+6      	; 0xdc6 <main+0x198>
     dc0:	30 95       	com	r19
     dc2:	21 95       	neg	r18
     dc4:	3f 4f       	sbci	r19, 0xFF	; 255
     dc6:	30 93 91 00 	sts	0x0091, r19
     dca:	20 93 90 00 	sts	0x0090, r18
   //diff = (diff ^ (diff >> 15)) - (diff >> 15);
    //CLEARBIT(diff,15);
	midPtCross = midPtCross + diff;
     dce:	80 91 94 00 	lds	r24, 0x0094
     dd2:	90 91 95 00 	lds	r25, 0x0095
     dd6:	82 0f       	add	r24, r18
     dd8:	93 1f       	adc	r25, r19
     dda:	90 93 95 00 	sts	0x0095, r25
     dde:	80 93 94 00 	sts	0x0094, r24
		micMean >>= 6; // take average of 1>>6 values to determine microphone mean
	 newVal = ReadADC(mic,REFVCC);
	 
	 ////////////////
	 //after new smarticle I don't need above loop can just use 512
  for (int i = 0; i < 1<<samps; i++)
     de2:	21 96       	adiw	r28, 0x01	; 1
     de4:	20 91 66 00 	lds	r18, 0x0066
     de8:	c6 01       	movw	r24, r12
     dea:	02 2e       	mov	r0, r18
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <main+0x1c4>
     dee:	88 0f       	add	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	0a 94       	dec	r0
     df4:	e2 f7       	brpl	.-8      	; 0xdee <main+0x1c0>
     df6:	c8 17       	cp	r28, r24
     df8:	d9 07       	cpc	r29, r25
     dfa:	0c f4       	brge	.+2      	; 0xdfe <main+0x1d0>
     dfc:	9f cf       	rjmp	.-194    	; 0xd3c <main+0x10e>
    //CLEARBIT(diff,15);
	midPtCross = midPtCross + diff;
 }
 
  //bitshift divide by sample, meancurr=meancurr/(2^samps)
  meanCurr >>= samps;
     dfe:	80 91 92 00 	lds	r24, 0x0092
     e02:	90 91 93 00 	lds	r25, 0x0093
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <main+0x1de>
     e08:	95 95       	asr	r25
     e0a:	87 95       	ror	r24
     e0c:	2a 95       	dec	r18
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <main+0x1da>
     e10:	90 93 93 00 	sts	0x0093, r25
     e14:	80 93 92 00 	sts	0x0092, r24
  currentRead(meanCurr);
     e18:	d2 de       	rcall	.-604    	; 0xbbe <_Z11currentReadj>
  if(stressCount<stressMoveThresh)
     e1a:	80 91 9b 00 	lds	r24, 0x009B
     e1e:	83 30       	cpi	r24, 0x03	; 3
     e20:	28 f4       	brcc	.+10     	; 0xe2c <main+0x1fe>
  {
	getRange(midPtCross);
     e22:	80 91 94 00 	lds	r24, 0x0094
     e26:	90 91 95 00 	lds	r25, 0x0095
     e2a:	51 de       	rcall	.-862    	; 0xace <_Z8getRangej>
     e2c:	80 ed       	ldi	r24, 0xD0	; 208
     e2e:	97 e0       	ldi	r25, 0x07	; 7
     e30:	f7 01       	movw	r30, r14
     e32:	31 97       	sbiw	r30, 0x01	; 1
     e34:	f1 f7       	brne	.-4      	; 0xe32 <main+0x204>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e36:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e38:	09 f4       	brne	.+2      	; 0xe3c <main+0x20e>
     e3a:	4c cf       	rjmp	.-360    	; 0xcd4 <main+0xa6>
     e3c:	f9 cf       	rjmp	.-14     	; 0xe30 <main+0x202>

00000e3e <_Z4mappddddd>:
  //Set ADIF to 1 to clear bin in IO standard way of clearing adif see 
  SETBIT(ADCSRA,ADIF);//ADCSRA |= (1 << ADIF); 17.4 p124 of datasheet
  _delay_us(200);
  return(ADC);
}
uint16_t mapp(double x, double in_min, double in_max, double out_min, double out_max)
     e3e:	2f 92       	push	r2
     e40:	3f 92       	push	r3
     e42:	4f 92       	push	r4
     e44:	5f 92       	push	r5
     e46:	6f 92       	push	r6
     e48:	7f 92       	push	r7
     e4a:	8f 92       	push	r8
     e4c:	9f 92       	push	r9
     e4e:	af 92       	push	r10
     e50:	bf 92       	push	r11
     e52:	cf 92       	push	r12
     e54:	df 92       	push	r13
     e56:	ef 92       	push	r14
     e58:	ff 92       	push	r15
     e5a:	0f 93       	push	r16
     e5c:	1f 93       	push	r17
     e5e:	df 93       	push	r29
     e60:	cf 93       	push	r28
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	19 01       	movw	r2, r18
     e68:	2a 01       	movw	r4, r20
     e6a:	7d d0       	rcall	.+250    	; 0xf66 <__subsf3>
     e6c:	3b 01       	movw	r6, r22
     e6e:	4c 01       	movw	r8, r24
     e70:	6d 89       	ldd	r22, Y+21	; 0x15
     e72:	7e 89       	ldd	r23, Y+22	; 0x16
     e74:	8f 89       	ldd	r24, Y+23	; 0x17
     e76:	98 8d       	ldd	r25, Y+24	; 0x18
     e78:	a6 01       	movw	r20, r12
     e7a:	95 01       	movw	r18, r10
     e7c:	74 d0       	rcall	.+232    	; 0xf66 <__subsf3>
     e7e:	9b 01       	movw	r18, r22
     e80:	ac 01       	movw	r20, r24
     e82:	c4 01       	movw	r24, r8
     e84:	b3 01       	movw	r22, r6
     e86:	b9 d1       	rcall	.+882    	; 0x11fa <__mulsf3>
     e88:	3b 01       	movw	r6, r22
     e8a:	4c 01       	movw	r8, r24
     e8c:	c8 01       	movw	r24, r16
     e8e:	b7 01       	movw	r22, r14
     e90:	a2 01       	movw	r20, r4
     e92:	91 01       	movw	r18, r2
     e94:	68 d0       	rcall	.+208    	; 0xf66 <__subsf3>
     e96:	9b 01       	movw	r18, r22
     e98:	ac 01       	movw	r20, r24
     e9a:	c4 01       	movw	r24, r8
     e9c:	b3 01       	movw	r22, r6
     e9e:	c8 d0       	rcall	.+400    	; 0x1030 <__divsf3>
     ea0:	a6 01       	movw	r20, r12
     ea2:	95 01       	movw	r18, r10
     ea4:	61 d0       	rcall	.+194    	; 0xf68 <__addsf3>
     ea6:	2c d1       	rcall	.+600    	; 0x1100 <__fixunssfsi>
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
     ea8:	cb 01       	movw	r24, r22
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	1f 91       	pop	r17
     eb0:	0f 91       	pop	r16
     eb2:	ff 90       	pop	r15
     eb4:	ef 90       	pop	r14
     eb6:	df 90       	pop	r13
     eb8:	cf 90       	pop	r12
     eba:	bf 90       	pop	r11
     ebc:	af 90       	pop	r10
     ebe:	9f 90       	pop	r9
     ec0:	8f 90       	pop	r8
     ec2:	7f 90       	pop	r7
     ec4:	6f 90       	pop	r6
     ec6:	5f 90       	pop	r5
     ec8:	4f 90       	pop	r4
     eca:	3f 90       	pop	r3
     ecc:	2f 90       	pop	r2
     ece:	08 95       	ret

00000ed0 <_Z41__static_initialization_and_destruction_0ii>:
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	91 05       	cpc	r25, r1
     ed4:	51 f4       	brne	.+20     	; 0xeea <_Z41__static_initialization_and_destruction_0ii+0x1a>
     ed6:	6f 5f       	subi	r22, 0xFF	; 255
     ed8:	7f 4f       	sbci	r23, 0xFF	; 255
     eda:	c1 f5       	brne	.+112    	; 0xf4c <_Z41__static_initialization_and_destruction_0ii+0x7c>
uint8_t mic   = 1;//A1;//int mic = A1;P2 //electret //or 7
uint8_t currP = 3;//3;//int currP = A3;P3
uint8_t SP1   = PB4;//4; //4;
uint16_t oldTime;

  Servo8Bit S1;  //create a servo object.
     edc:	8e e9       	ldi	r24, 0x9E	; 158
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	86 da       	rcall	.-2804   	; 0x3ee <_ZN9Servo8BitC1Ev>
  Servo8Bit S2;
     ee2:	84 ea       	ldi	r24, 0xA4	; 164
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	83 da       	rcall	.-2810   	; 0x3ee <_ZN9Servo8BitC1Ev>
     ee8:	08 95       	ret
     eea:	89 2b       	or	r24, r25
     eec:	79 f5       	brne	.+94     	; 0xf4c <_Z41__static_initialization_and_destruction_0ii+0x7c>
     eee:	6f 5f       	subi	r22, 0xFF	; 255
     ef0:	7f 4f       	sbci	r23, 0xFF	; 255
     ef2:	61 f5       	brne	.+88     	; 0xf4c <_Z41__static_initialization_and_destruction_0ii+0x7c>
// RETURNS:     Nothing
//
//=============================================================================
void Servo8Bit::detach()
{
    ServoSequencer::deregisterServo(myServoNumber);
     ef4:	e0 91 a4 00 	lds	r30, 0x00A4
// RETURNS:     Nothing
//=============================================================================
void ServoSequencer::deregisterServo(uint8_t servoSlotNumber)
{
    //make sure we got a valid slot number
    if(servoSlotNumber < kMaxNumberOfServosSupported)
     ef8:	e5 30       	cpi	r30, 0x05	; 5
     efa:	70 f4       	brcc	.+28     	; 0xf18 <_Z41__static_initialization_and_destruction_0ii+0x48>
    {
        servoRegistry[servoSlotNumber].enabled      = false;
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	ee 0f       	add	r30, r30
     f00:	ff 1f       	adc	r31, r31
     f02:	ee 0f       	add	r30, r30
     f04:	ff 1f       	adc	r31, r31
     f06:	df 01       	movw	r26, r30
     f08:	ad 58       	subi	r26, 0x8D	; 141
     f0a:	bf 4f       	sbci	r27, 0xFF	; 255
     f0c:	1c 92       	st	X, r1
        servoRegistry[servoSlotNumber].slotOccupied = false;
     f0e:	ef 58       	subi	r30, 0x8F	; 143
     f10:	ff 4f       	sbci	r31, 0xFF	; 255
     f12:	13 82       	std	Z+3, r1	; 0x03
		servoRegistry[servoSlotNumber].pulseLengthInTicks = 128; //restore the pulse length to the default setting.
     f14:	80 e8       	ldi	r24, 0x80	; 128
     f16:	80 83       	st	Z, r24
//
//=============================================================================
void Servo8Bit::detach()
{
    ServoSequencer::deregisterServo(myServoNumber);
    myServoNumber = invalidServoNumber;
     f18:	80 91 a5 00 	lds	r24, 0x00A5
     f1c:	80 93 a4 00 	sts	0x00A4, r24
// RETURNS:     Nothing
//
//=============================================================================
void Servo8Bit::detach()
{
    ServoSequencer::deregisterServo(myServoNumber);
     f20:	e0 91 9e 00 	lds	r30, 0x009E
// RETURNS:     Nothing
//=============================================================================
void ServoSequencer::deregisterServo(uint8_t servoSlotNumber)
{
    //make sure we got a valid slot number
    if(servoSlotNumber < kMaxNumberOfServosSupported)
     f24:	e5 30       	cpi	r30, 0x05	; 5
     f26:	70 f4       	brcc	.+28     	; 0xf44 <_Z41__static_initialization_and_destruction_0ii+0x74>
    {
        servoRegistry[servoSlotNumber].enabled      = false;
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	ee 0f       	add	r30, r30
     f2c:	ff 1f       	adc	r31, r31
     f2e:	ee 0f       	add	r30, r30
     f30:	ff 1f       	adc	r31, r31
     f32:	df 01       	movw	r26, r30
     f34:	ad 58       	subi	r26, 0x8D	; 141
     f36:	bf 4f       	sbci	r27, 0xFF	; 255
     f38:	1c 92       	st	X, r1
        servoRegistry[servoSlotNumber].slotOccupied = false;
     f3a:	ef 58       	subi	r30, 0x8F	; 143
     f3c:	ff 4f       	sbci	r31, 0xFF	; 255
     f3e:	13 82       	std	Z+3, r1	; 0x03
		servoRegistry[servoSlotNumber].pulseLengthInTicks = 128; //restore the pulse length to the default setting.
     f40:	80 e8       	ldi	r24, 0x80	; 128
     f42:	80 83       	st	Z, r24
//
//=============================================================================
void Servo8Bit::detach()
{
    ServoSequencer::deregisterServo(myServoNumber);
    myServoNumber = invalidServoNumber;
     f44:	80 91 9f 00 	lds	r24, 0x009F
     f48:	80 93 9e 00 	sts	0x009E, r24
     f4c:	08 95       	ret

00000f4e <_GLOBAL__I__ZN14ServoSequencer5stateE>:
  return(ADC);
}
uint16_t mapp(double x, double in_min, double in_max, double out_min, double out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	6f ef       	ldi	r22, 0xFF	; 255
     f54:	7f ef       	ldi	r23, 0xFF	; 255
     f56:	bc df       	rcall	.-136    	; 0xed0 <_Z41__static_initialization_and_destruction_0ii>
     f58:	08 95       	ret

00000f5a <_GLOBAL__D__ZN14ServoSequencer5stateE>:
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	6f ef       	ldi	r22, 0xFF	; 255
     f60:	7f ef       	ldi	r23, 0xFF	; 255
     f62:	b6 df       	rcall	.-148    	; 0xed0 <_Z41__static_initialization_and_destruction_0ii>
     f64:	08 95       	ret

00000f66 <__subsf3>:
     f66:	50 58       	subi	r21, 0x80	; 128

00000f68 <__addsf3>:
     f68:	bb 27       	eor	r27, r27
     f6a:	aa 27       	eor	r26, r26
     f6c:	0e d0       	rcall	.+28     	; 0xf8a <__addsf3x>
     f6e:	0b c1       	rjmp	.+534    	; 0x1186 <__fp_round>
     f70:	fc d0       	rcall	.+504    	; 0x116a <__fp_pscA>
     f72:	30 f0       	brcs	.+12     	; 0xf80 <__addsf3+0x18>
     f74:	01 d1       	rcall	.+514    	; 0x1178 <__fp_pscB>
     f76:	20 f0       	brcs	.+8      	; 0xf80 <__addsf3+0x18>
     f78:	31 f4       	brne	.+12     	; 0xf86 <__addsf3+0x1e>
     f7a:	9f 3f       	cpi	r25, 0xFF	; 255
     f7c:	11 f4       	brne	.+4      	; 0xf82 <__addsf3+0x1a>
     f7e:	1e f4       	brtc	.+6      	; 0xf86 <__addsf3+0x1e>
     f80:	f1 c0       	rjmp	.+482    	; 0x1164 <__fp_nan>
     f82:	0e f4       	brtc	.+2      	; 0xf86 <__addsf3+0x1e>
     f84:	e0 95       	com	r30
     f86:	e7 fb       	bst	r30, 7
     f88:	e7 c0       	rjmp	.+462    	; 0x1158 <__fp_inf>

00000f8a <__addsf3x>:
     f8a:	e9 2f       	mov	r30, r25
     f8c:	0d d1       	rcall	.+538    	; 0x11a8 <__fp_split3>
     f8e:	80 f3       	brcs	.-32     	; 0xf70 <__addsf3+0x8>
     f90:	ba 17       	cp	r27, r26
     f92:	62 07       	cpc	r22, r18
     f94:	73 07       	cpc	r23, r19
     f96:	84 07       	cpc	r24, r20
     f98:	95 07       	cpc	r25, r21
     f9a:	18 f0       	brcs	.+6      	; 0xfa2 <__addsf3x+0x18>
     f9c:	71 f4       	brne	.+28     	; 0xfba <__addsf3x+0x30>
     f9e:	9e f5       	brtc	.+102    	; 0x1006 <__addsf3x+0x7c>
     fa0:	25 c1       	rjmp	.+586    	; 0x11ec <__fp_zero>
     fa2:	0e f4       	brtc	.+2      	; 0xfa6 <__addsf3x+0x1c>
     fa4:	e0 95       	com	r30
     fa6:	0b 2e       	mov	r0, r27
     fa8:	ba 2f       	mov	r27, r26
     faa:	a0 2d       	mov	r26, r0
     fac:	0b 01       	movw	r0, r22
     fae:	b9 01       	movw	r22, r18
     fb0:	90 01       	movw	r18, r0
     fb2:	0c 01       	movw	r0, r24
     fb4:	ca 01       	movw	r24, r20
     fb6:	a0 01       	movw	r20, r0
     fb8:	11 24       	eor	r1, r1
     fba:	ff 27       	eor	r31, r31
     fbc:	59 1b       	sub	r21, r25
     fbe:	99 f0       	breq	.+38     	; 0xfe6 <__addsf3x+0x5c>
     fc0:	59 3f       	cpi	r21, 0xF9	; 249
     fc2:	50 f4       	brcc	.+20     	; 0xfd8 <__addsf3x+0x4e>
     fc4:	50 3e       	cpi	r21, 0xE0	; 224
     fc6:	68 f1       	brcs	.+90     	; 0x1022 <__addsf3x+0x98>
     fc8:	1a 16       	cp	r1, r26
     fca:	f0 40       	sbci	r31, 0x00	; 0
     fcc:	a2 2f       	mov	r26, r18
     fce:	23 2f       	mov	r18, r19
     fd0:	34 2f       	mov	r19, r20
     fd2:	44 27       	eor	r20, r20
     fd4:	58 5f       	subi	r21, 0xF8	; 248
     fd6:	f3 cf       	rjmp	.-26     	; 0xfbe <__addsf3x+0x34>
     fd8:	46 95       	lsr	r20
     fda:	37 95       	ror	r19
     fdc:	27 95       	ror	r18
     fde:	a7 95       	ror	r26
     fe0:	f0 40       	sbci	r31, 0x00	; 0
     fe2:	53 95       	inc	r21
     fe4:	c9 f7       	brne	.-14     	; 0xfd8 <__addsf3x+0x4e>
     fe6:	7e f4       	brtc	.+30     	; 0x1006 <__addsf3x+0x7c>
     fe8:	1f 16       	cp	r1, r31
     fea:	ba 0b       	sbc	r27, r26
     fec:	62 0b       	sbc	r22, r18
     fee:	73 0b       	sbc	r23, r19
     ff0:	84 0b       	sbc	r24, r20
     ff2:	ba f0       	brmi	.+46     	; 0x1022 <__addsf3x+0x98>
     ff4:	91 50       	subi	r25, 0x01	; 1
     ff6:	a1 f0       	breq	.+40     	; 0x1020 <__addsf3x+0x96>
     ff8:	ff 0f       	add	r31, r31
     ffa:	bb 1f       	adc	r27, r27
     ffc:	66 1f       	adc	r22, r22
     ffe:	77 1f       	adc	r23, r23
    1000:	88 1f       	adc	r24, r24
    1002:	c2 f7       	brpl	.-16     	; 0xff4 <__addsf3x+0x6a>
    1004:	0e c0       	rjmp	.+28     	; 0x1022 <__addsf3x+0x98>
    1006:	ba 0f       	add	r27, r26
    1008:	62 1f       	adc	r22, r18
    100a:	73 1f       	adc	r23, r19
    100c:	84 1f       	adc	r24, r20
    100e:	48 f4       	brcc	.+18     	; 0x1022 <__addsf3x+0x98>
    1010:	87 95       	ror	r24
    1012:	77 95       	ror	r23
    1014:	67 95       	ror	r22
    1016:	b7 95       	ror	r27
    1018:	f7 95       	ror	r31
    101a:	9e 3f       	cpi	r25, 0xFE	; 254
    101c:	08 f0       	brcs	.+2      	; 0x1020 <__addsf3x+0x96>
    101e:	b3 cf       	rjmp	.-154    	; 0xf86 <__addsf3+0x1e>
    1020:	93 95       	inc	r25
    1022:	88 0f       	add	r24, r24
    1024:	08 f0       	brcs	.+2      	; 0x1028 <__addsf3x+0x9e>
    1026:	99 27       	eor	r25, r25
    1028:	ee 0f       	add	r30, r30
    102a:	97 95       	ror	r25
    102c:	87 95       	ror	r24
    102e:	08 95       	ret

00001030 <__divsf3>:
    1030:	0c d0       	rcall	.+24     	; 0x104a <__divsf3x>
    1032:	a9 c0       	rjmp	.+338    	; 0x1186 <__fp_round>
    1034:	a1 d0       	rcall	.+322    	; 0x1178 <__fp_pscB>
    1036:	40 f0       	brcs	.+16     	; 0x1048 <__divsf3+0x18>
    1038:	98 d0       	rcall	.+304    	; 0x116a <__fp_pscA>
    103a:	30 f0       	brcs	.+12     	; 0x1048 <__divsf3+0x18>
    103c:	21 f4       	brne	.+8      	; 0x1046 <__divsf3+0x16>
    103e:	5f 3f       	cpi	r21, 0xFF	; 255
    1040:	19 f0       	breq	.+6      	; 0x1048 <__divsf3+0x18>
    1042:	8a c0       	rjmp	.+276    	; 0x1158 <__fp_inf>
    1044:	51 11       	cpse	r21, r1
    1046:	d3 c0       	rjmp	.+422    	; 0x11ee <__fp_szero>
    1048:	8d c0       	rjmp	.+282    	; 0x1164 <__fp_nan>

0000104a <__divsf3x>:
    104a:	ae d0       	rcall	.+348    	; 0x11a8 <__fp_split3>
    104c:	98 f3       	brcs	.-26     	; 0x1034 <__divsf3+0x4>

0000104e <__divsf3_pse>:
    104e:	99 23       	and	r25, r25
    1050:	c9 f3       	breq	.-14     	; 0x1044 <__divsf3+0x14>
    1052:	55 23       	and	r21, r21
    1054:	b1 f3       	breq	.-20     	; 0x1042 <__divsf3+0x12>
    1056:	95 1b       	sub	r25, r21
    1058:	55 0b       	sbc	r21, r21
    105a:	bb 27       	eor	r27, r27
    105c:	aa 27       	eor	r26, r26
    105e:	62 17       	cp	r22, r18
    1060:	73 07       	cpc	r23, r19
    1062:	84 07       	cpc	r24, r20
    1064:	38 f0       	brcs	.+14     	; 0x1074 <__divsf3_pse+0x26>
    1066:	9f 5f       	subi	r25, 0xFF	; 255
    1068:	5f 4f       	sbci	r21, 0xFF	; 255
    106a:	22 0f       	add	r18, r18
    106c:	33 1f       	adc	r19, r19
    106e:	44 1f       	adc	r20, r20
    1070:	aa 1f       	adc	r26, r26
    1072:	a9 f3       	breq	.-22     	; 0x105e <__divsf3_pse+0x10>
    1074:	33 d0       	rcall	.+102    	; 0x10dc <__divsf3_pse+0x8e>
    1076:	0e 2e       	mov	r0, r30
    1078:	3a f0       	brmi	.+14     	; 0x1088 <__divsf3_pse+0x3a>
    107a:	e0 e8       	ldi	r30, 0x80	; 128
    107c:	30 d0       	rcall	.+96     	; 0x10de <__divsf3_pse+0x90>
    107e:	91 50       	subi	r25, 0x01	; 1
    1080:	50 40       	sbci	r21, 0x00	; 0
    1082:	e6 95       	lsr	r30
    1084:	00 1c       	adc	r0, r0
    1086:	ca f7       	brpl	.-14     	; 0x107a <__divsf3_pse+0x2c>
    1088:	29 d0       	rcall	.+82     	; 0x10dc <__divsf3_pse+0x8e>
    108a:	fe 2f       	mov	r31, r30
    108c:	27 d0       	rcall	.+78     	; 0x10dc <__divsf3_pse+0x8e>
    108e:	66 0f       	add	r22, r22
    1090:	77 1f       	adc	r23, r23
    1092:	88 1f       	adc	r24, r24
    1094:	bb 1f       	adc	r27, r27
    1096:	26 17       	cp	r18, r22
    1098:	37 07       	cpc	r19, r23
    109a:	48 07       	cpc	r20, r24
    109c:	ab 07       	cpc	r26, r27
    109e:	b0 e8       	ldi	r27, 0x80	; 128
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <__divsf3_pse+0x56>
    10a2:	bb 0b       	sbc	r27, r27
    10a4:	80 2d       	mov	r24, r0
    10a6:	bf 01       	movw	r22, r30
    10a8:	ff 27       	eor	r31, r31
    10aa:	93 58       	subi	r25, 0x83	; 131
    10ac:	5f 4f       	sbci	r21, 0xFF	; 255
    10ae:	2a f0       	brmi	.+10     	; 0x10ba <__divsf3_pse+0x6c>
    10b0:	9e 3f       	cpi	r25, 0xFE	; 254
    10b2:	51 05       	cpc	r21, r1
    10b4:	68 f0       	brcs	.+26     	; 0x10d0 <__divsf3_pse+0x82>
    10b6:	50 c0       	rjmp	.+160    	; 0x1158 <__fp_inf>
    10b8:	9a c0       	rjmp	.+308    	; 0x11ee <__fp_szero>
    10ba:	5f 3f       	cpi	r21, 0xFF	; 255
    10bc:	ec f3       	brlt	.-6      	; 0x10b8 <__divsf3_pse+0x6a>
    10be:	98 3e       	cpi	r25, 0xE8	; 232
    10c0:	dc f3       	brlt	.-10     	; 0x10b8 <__divsf3_pse+0x6a>
    10c2:	86 95       	lsr	r24
    10c4:	77 95       	ror	r23
    10c6:	67 95       	ror	r22
    10c8:	b7 95       	ror	r27
    10ca:	f7 95       	ror	r31
    10cc:	9f 5f       	subi	r25, 0xFF	; 255
    10ce:	c9 f7       	brne	.-14     	; 0x10c2 <__divsf3_pse+0x74>
    10d0:	88 0f       	add	r24, r24
    10d2:	91 1d       	adc	r25, r1
    10d4:	96 95       	lsr	r25
    10d6:	87 95       	ror	r24
    10d8:	97 f9       	bld	r25, 7
    10da:	08 95       	ret
    10dc:	e1 e0       	ldi	r30, 0x01	; 1
    10de:	66 0f       	add	r22, r22
    10e0:	77 1f       	adc	r23, r23
    10e2:	88 1f       	adc	r24, r24
    10e4:	bb 1f       	adc	r27, r27
    10e6:	62 17       	cp	r22, r18
    10e8:	73 07       	cpc	r23, r19
    10ea:	84 07       	cpc	r24, r20
    10ec:	ba 07       	cpc	r27, r26
    10ee:	20 f0       	brcs	.+8      	; 0x10f8 <__divsf3_pse+0xaa>
    10f0:	62 1b       	sub	r22, r18
    10f2:	73 0b       	sbc	r23, r19
    10f4:	84 0b       	sbc	r24, r20
    10f6:	ba 0b       	sbc	r27, r26
    10f8:	ee 1f       	adc	r30, r30
    10fa:	88 f7       	brcc	.-30     	; 0x10de <__divsf3_pse+0x90>
    10fc:	e0 95       	com	r30
    10fe:	08 95       	ret

00001100 <__fixunssfsi>:
    1100:	5b d0       	rcall	.+182    	; 0x11b8 <__fp_splitA>
    1102:	88 f0       	brcs	.+34     	; 0x1126 <__fixunssfsi+0x26>
    1104:	9f 57       	subi	r25, 0x7F	; 127
    1106:	90 f0       	brcs	.+36     	; 0x112c <__fixunssfsi+0x2c>
    1108:	b9 2f       	mov	r27, r25
    110a:	99 27       	eor	r25, r25
    110c:	b7 51       	subi	r27, 0x17	; 23
    110e:	a0 f0       	brcs	.+40     	; 0x1138 <__fixunssfsi+0x38>
    1110:	d1 f0       	breq	.+52     	; 0x1146 <__fixunssfsi+0x46>
    1112:	66 0f       	add	r22, r22
    1114:	77 1f       	adc	r23, r23
    1116:	88 1f       	adc	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	1a f0       	brmi	.+6      	; 0x1122 <__fixunssfsi+0x22>
    111c:	ba 95       	dec	r27
    111e:	c9 f7       	brne	.-14     	; 0x1112 <__fixunssfsi+0x12>
    1120:	12 c0       	rjmp	.+36     	; 0x1146 <__fixunssfsi+0x46>
    1122:	b1 30       	cpi	r27, 0x01	; 1
    1124:	81 f0       	breq	.+32     	; 0x1146 <__fixunssfsi+0x46>
    1126:	62 d0       	rcall	.+196    	; 0x11ec <__fp_zero>
    1128:	b1 e0       	ldi	r27, 0x01	; 1
    112a:	08 95       	ret
    112c:	5f c0       	rjmp	.+190    	; 0x11ec <__fp_zero>
    112e:	67 2f       	mov	r22, r23
    1130:	78 2f       	mov	r23, r24
    1132:	88 27       	eor	r24, r24
    1134:	b8 5f       	subi	r27, 0xF8	; 248
    1136:	39 f0       	breq	.+14     	; 0x1146 <__fixunssfsi+0x46>
    1138:	b9 3f       	cpi	r27, 0xF9	; 249
    113a:	cc f3       	brlt	.-14     	; 0x112e <__fixunssfsi+0x2e>
    113c:	86 95       	lsr	r24
    113e:	77 95       	ror	r23
    1140:	67 95       	ror	r22
    1142:	b3 95       	inc	r27
    1144:	d9 f7       	brne	.-10     	; 0x113c <__fixunssfsi+0x3c>
    1146:	3e f4       	brtc	.+14     	; 0x1156 <__fixunssfsi+0x56>
    1148:	90 95       	com	r25
    114a:	80 95       	com	r24
    114c:	70 95       	com	r23
    114e:	61 95       	neg	r22
    1150:	7f 4f       	sbci	r23, 0xFF	; 255
    1152:	8f 4f       	sbci	r24, 0xFF	; 255
    1154:	9f 4f       	sbci	r25, 0xFF	; 255
    1156:	08 95       	ret

00001158 <__fp_inf>:
    1158:	97 f9       	bld	r25, 7
    115a:	9f 67       	ori	r25, 0x7F	; 127
    115c:	80 e8       	ldi	r24, 0x80	; 128
    115e:	70 e0       	ldi	r23, 0x00	; 0
    1160:	60 e0       	ldi	r22, 0x00	; 0
    1162:	08 95       	ret

00001164 <__fp_nan>:
    1164:	9f ef       	ldi	r25, 0xFF	; 255
    1166:	80 ec       	ldi	r24, 0xC0	; 192
    1168:	08 95       	ret

0000116a <__fp_pscA>:
    116a:	00 24       	eor	r0, r0
    116c:	0a 94       	dec	r0
    116e:	16 16       	cp	r1, r22
    1170:	17 06       	cpc	r1, r23
    1172:	18 06       	cpc	r1, r24
    1174:	09 06       	cpc	r0, r25
    1176:	08 95       	ret

00001178 <__fp_pscB>:
    1178:	00 24       	eor	r0, r0
    117a:	0a 94       	dec	r0
    117c:	12 16       	cp	r1, r18
    117e:	13 06       	cpc	r1, r19
    1180:	14 06       	cpc	r1, r20
    1182:	05 06       	cpc	r0, r21
    1184:	08 95       	ret

00001186 <__fp_round>:
    1186:	09 2e       	mov	r0, r25
    1188:	03 94       	inc	r0
    118a:	00 0c       	add	r0, r0
    118c:	11 f4       	brne	.+4      	; 0x1192 <__fp_round+0xc>
    118e:	88 23       	and	r24, r24
    1190:	52 f0       	brmi	.+20     	; 0x11a6 <__fp_round+0x20>
    1192:	bb 0f       	add	r27, r27
    1194:	40 f4       	brcc	.+16     	; 0x11a6 <__fp_round+0x20>
    1196:	bf 2b       	or	r27, r31
    1198:	11 f4       	brne	.+4      	; 0x119e <__fp_round+0x18>
    119a:	60 ff       	sbrs	r22, 0
    119c:	04 c0       	rjmp	.+8      	; 0x11a6 <__fp_round+0x20>
    119e:	6f 5f       	subi	r22, 0xFF	; 255
    11a0:	7f 4f       	sbci	r23, 0xFF	; 255
    11a2:	8f 4f       	sbci	r24, 0xFF	; 255
    11a4:	9f 4f       	sbci	r25, 0xFF	; 255
    11a6:	08 95       	ret

000011a8 <__fp_split3>:
    11a8:	57 fd       	sbrc	r21, 7
    11aa:	90 58       	subi	r25, 0x80	; 128
    11ac:	44 0f       	add	r20, r20
    11ae:	55 1f       	adc	r21, r21
    11b0:	59 f0       	breq	.+22     	; 0x11c8 <__fp_splitA+0x10>
    11b2:	5f 3f       	cpi	r21, 0xFF	; 255
    11b4:	71 f0       	breq	.+28     	; 0x11d2 <__fp_splitA+0x1a>
    11b6:	47 95       	ror	r20

000011b8 <__fp_splitA>:
    11b8:	88 0f       	add	r24, r24
    11ba:	97 fb       	bst	r25, 7
    11bc:	99 1f       	adc	r25, r25
    11be:	61 f0       	breq	.+24     	; 0x11d8 <__fp_splitA+0x20>
    11c0:	9f 3f       	cpi	r25, 0xFF	; 255
    11c2:	79 f0       	breq	.+30     	; 0x11e2 <__fp_splitA+0x2a>
    11c4:	87 95       	ror	r24
    11c6:	08 95       	ret
    11c8:	12 16       	cp	r1, r18
    11ca:	13 06       	cpc	r1, r19
    11cc:	14 06       	cpc	r1, r20
    11ce:	55 1f       	adc	r21, r21
    11d0:	f2 cf       	rjmp	.-28     	; 0x11b6 <__fp_split3+0xe>
    11d2:	46 95       	lsr	r20
    11d4:	f1 df       	rcall	.-30     	; 0x11b8 <__fp_splitA>
    11d6:	08 c0       	rjmp	.+16     	; 0x11e8 <__fp_splitA+0x30>
    11d8:	16 16       	cp	r1, r22
    11da:	17 06       	cpc	r1, r23
    11dc:	18 06       	cpc	r1, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	f1 cf       	rjmp	.-30     	; 0x11c4 <__fp_splitA+0xc>
    11e2:	86 95       	lsr	r24
    11e4:	71 05       	cpc	r23, r1
    11e6:	61 05       	cpc	r22, r1
    11e8:	08 94       	sec
    11ea:	08 95       	ret

000011ec <__fp_zero>:
    11ec:	e8 94       	clt

000011ee <__fp_szero>:
    11ee:	bb 27       	eor	r27, r27
    11f0:	66 27       	eor	r22, r22
    11f2:	77 27       	eor	r23, r23
    11f4:	cb 01       	movw	r24, r22
    11f6:	97 f9       	bld	r25, 7
    11f8:	08 95       	ret

000011fa <__mulsf3>:
    11fa:	0a d0       	rcall	.+20     	; 0x1210 <__mulsf3x>
    11fc:	c4 cf       	rjmp	.-120    	; 0x1186 <__fp_round>
    11fe:	b5 df       	rcall	.-150    	; 0x116a <__fp_pscA>
    1200:	28 f0       	brcs	.+10     	; 0x120c <__mulsf3+0x12>
    1202:	ba df       	rcall	.-140    	; 0x1178 <__fp_pscB>
    1204:	18 f0       	brcs	.+6      	; 0x120c <__mulsf3+0x12>
    1206:	95 23       	and	r25, r21
    1208:	09 f0       	breq	.+2      	; 0x120c <__mulsf3+0x12>
    120a:	a6 cf       	rjmp	.-180    	; 0x1158 <__fp_inf>
    120c:	ab cf       	rjmp	.-170    	; 0x1164 <__fp_nan>
    120e:	ef cf       	rjmp	.-34     	; 0x11ee <__fp_szero>

00001210 <__mulsf3x>:
    1210:	cb df       	rcall	.-106    	; 0x11a8 <__fp_split3>
    1212:	a8 f3       	brcs	.-22     	; 0x11fe <__mulsf3+0x4>

00001214 <__mulsf3_pse>:
    1214:	99 23       	and	r25, r25
    1216:	d9 f3       	breq	.-10     	; 0x120e <__mulsf3+0x14>
    1218:	55 23       	and	r21, r21
    121a:	c9 f3       	breq	.-14     	; 0x120e <__mulsf3+0x14>
    121c:	95 0f       	add	r25, r21
    121e:	50 e0       	ldi	r21, 0x00	; 0
    1220:	55 1f       	adc	r21, r21
    1222:	aa 27       	eor	r26, r26
    1224:	ee 27       	eor	r30, r30
    1226:	ff 27       	eor	r31, r31
    1228:	bb 27       	eor	r27, r27
    122a:	00 24       	eor	r0, r0
    122c:	08 94       	sec
    122e:	67 95       	ror	r22
    1230:	20 f4       	brcc	.+8      	; 0x123a <__mulsf3_pse+0x26>
    1232:	e2 0f       	add	r30, r18
    1234:	f3 1f       	adc	r31, r19
    1236:	b4 1f       	adc	r27, r20
    1238:	0a 1e       	adc	r0, r26
    123a:	22 0f       	add	r18, r18
    123c:	33 1f       	adc	r19, r19
    123e:	44 1f       	adc	r20, r20
    1240:	aa 1f       	adc	r26, r26
    1242:	66 95       	lsr	r22
    1244:	a9 f7       	brne	.-22     	; 0x1230 <__mulsf3_pse+0x1c>
    1246:	77 95       	ror	r23
    1248:	30 f4       	brcc	.+12     	; 0x1256 <__mulsf3_pse+0x42>
    124a:	f3 0f       	add	r31, r19
    124c:	b4 1f       	adc	r27, r20
    124e:	0a 1e       	adc	r0, r26
    1250:	12 1e       	adc	r1, r18
    1252:	08 f4       	brcc	.+2      	; 0x1256 <__mulsf3_pse+0x42>
    1254:	63 95       	inc	r22
    1256:	33 0f       	add	r19, r19
    1258:	44 1f       	adc	r20, r20
    125a:	aa 1f       	adc	r26, r26
    125c:	22 1f       	adc	r18, r18
    125e:	76 95       	lsr	r23
    1260:	99 f7       	brne	.-26     	; 0x1248 <__mulsf3_pse+0x34>
    1262:	87 95       	ror	r24
    1264:	20 f4       	brcc	.+8      	; 0x126e <__mulsf3_pse+0x5a>
    1266:	b4 0f       	add	r27, r20
    1268:	0a 1e       	adc	r0, r26
    126a:	12 1e       	adc	r1, r18
    126c:	63 1f       	adc	r22, r19
    126e:	44 0f       	add	r20, r20
    1270:	aa 1f       	adc	r26, r26
    1272:	22 1f       	adc	r18, r18
    1274:	33 1f       	adc	r19, r19
    1276:	86 95       	lsr	r24
    1278:	a9 f7       	brne	.-22     	; 0x1264 <__mulsf3_pse+0x50>
    127a:	86 2f       	mov	r24, r22
    127c:	71 2d       	mov	r23, r1
    127e:	60 2d       	mov	r22, r0
    1280:	11 24       	eor	r1, r1
    1282:	9f 57       	subi	r25, 0x7F	; 127
    1284:	50 40       	sbci	r21, 0x00	; 0
    1286:	8a f0       	brmi	.+34     	; 0x12aa <__mulsf3_pse+0x96>
    1288:	e1 f0       	breq	.+56     	; 0x12c2 <__mulsf3_pse+0xae>
    128a:	88 23       	and	r24, r24
    128c:	4a f0       	brmi	.+18     	; 0x12a0 <__mulsf3_pse+0x8c>
    128e:	ee 0f       	add	r30, r30
    1290:	ff 1f       	adc	r31, r31
    1292:	bb 1f       	adc	r27, r27
    1294:	66 1f       	adc	r22, r22
    1296:	77 1f       	adc	r23, r23
    1298:	88 1f       	adc	r24, r24
    129a:	91 50       	subi	r25, 0x01	; 1
    129c:	50 40       	sbci	r21, 0x00	; 0
    129e:	a9 f7       	brne	.-22     	; 0x128a <__mulsf3_pse+0x76>
    12a0:	9e 3f       	cpi	r25, 0xFE	; 254
    12a2:	51 05       	cpc	r21, r1
    12a4:	70 f0       	brcs	.+28     	; 0x12c2 <__mulsf3_pse+0xae>
    12a6:	58 cf       	rjmp	.-336    	; 0x1158 <__fp_inf>
    12a8:	a2 cf       	rjmp	.-188    	; 0x11ee <__fp_szero>
    12aa:	5f 3f       	cpi	r21, 0xFF	; 255
    12ac:	ec f3       	brlt	.-6      	; 0x12a8 <__mulsf3_pse+0x94>
    12ae:	98 3e       	cpi	r25, 0xE8	; 232
    12b0:	dc f3       	brlt	.-10     	; 0x12a8 <__mulsf3_pse+0x94>
    12b2:	86 95       	lsr	r24
    12b4:	77 95       	ror	r23
    12b6:	67 95       	ror	r22
    12b8:	b7 95       	ror	r27
    12ba:	f7 95       	ror	r31
    12bc:	e7 95       	ror	r30
    12be:	9f 5f       	subi	r25, 0xFF	; 255
    12c0:	c1 f7       	brne	.-16     	; 0x12b2 <__mulsf3_pse+0x9e>
    12c2:	fe 2b       	or	r31, r30
    12c4:	88 0f       	add	r24, r24
    12c6:	91 1d       	adc	r25, r1
    12c8:	96 95       	lsr	r25
    12ca:	87 95       	ror	r24
    12cc:	97 f9       	bld	r25, 7
    12ce:	08 95       	ret

000012d0 <__mulhi3>:
    12d0:	55 27       	eor	r21, r21
    12d2:	00 24       	eor	r0, r0

000012d4 <__mulhi3_loop>:
    12d4:	80 ff       	sbrs	r24, 0
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <__mulhi3_skip1>
    12d8:	06 0e       	add	r0, r22
    12da:	57 1f       	adc	r21, r23

000012dc <__mulhi3_skip1>:
    12dc:	66 0f       	add	r22, r22
    12de:	77 1f       	adc	r23, r23
    12e0:	61 15       	cp	r22, r1
    12e2:	71 05       	cpc	r23, r1
    12e4:	21 f0       	breq	.+8      	; 0x12ee <__mulhi3_exit>
    12e6:	96 95       	lsr	r25
    12e8:	87 95       	ror	r24
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	99 f7       	brne	.-26     	; 0x12d4 <__mulhi3_loop>

000012ee <__mulhi3_exit>:
    12ee:	95 2f       	mov	r25, r21
    12f0:	80 2d       	mov	r24, r0
    12f2:	08 95       	ret

000012f4 <__mulsi3>:
    12f4:	ff 27       	eor	r31, r31
    12f6:	ee 27       	eor	r30, r30
    12f8:	bb 27       	eor	r27, r27
    12fa:	aa 27       	eor	r26, r26

000012fc <__mulsi3_loop>:
    12fc:	60 ff       	sbrs	r22, 0
    12fe:	04 c0       	rjmp	.+8      	; 0x1308 <__mulsi3_skip1>
    1300:	a2 0f       	add	r26, r18
    1302:	b3 1f       	adc	r27, r19
    1304:	e4 1f       	adc	r30, r20
    1306:	f5 1f       	adc	r31, r21

00001308 <__mulsi3_skip1>:
    1308:	22 0f       	add	r18, r18
    130a:	33 1f       	adc	r19, r19
    130c:	44 1f       	adc	r20, r20
    130e:	55 1f       	adc	r21, r21
    1310:	96 95       	lsr	r25
    1312:	87 95       	ror	r24
    1314:	77 95       	ror	r23
    1316:	67 95       	ror	r22
    1318:	89 f7       	brne	.-30     	; 0x12fc <__mulsi3_loop>
    131a:	00 97       	sbiw	r24, 0x00	; 0
    131c:	76 07       	cpc	r23, r22
    131e:	71 f7       	brne	.-36     	; 0x12fc <__mulsi3_loop>

00001320 <__mulsi3_exit>:
    1320:	cf 01       	movw	r24, r30
    1322:	bd 01       	movw	r22, r26
    1324:	08 95       	ret

00001326 <__divmodsi4>:
    1326:	97 fb       	bst	r25, 7
    1328:	09 2e       	mov	r0, r25
    132a:	05 26       	eor	r0, r21
    132c:	0e d0       	rcall	.+28     	; 0x134a <__divmodsi4_neg1>
    132e:	57 fd       	sbrc	r21, 7
    1330:	04 d0       	rcall	.+8      	; 0x133a <__divmodsi4_neg2>
    1332:	14 d0       	rcall	.+40     	; 0x135c <__udivmodsi4>
    1334:	0a d0       	rcall	.+20     	; 0x134a <__divmodsi4_neg1>
    1336:	00 1c       	adc	r0, r0
    1338:	38 f4       	brcc	.+14     	; 0x1348 <__divmodsi4_exit>

0000133a <__divmodsi4_neg2>:
    133a:	50 95       	com	r21
    133c:	40 95       	com	r20
    133e:	30 95       	com	r19
    1340:	21 95       	neg	r18
    1342:	3f 4f       	sbci	r19, 0xFF	; 255
    1344:	4f 4f       	sbci	r20, 0xFF	; 255
    1346:	5f 4f       	sbci	r21, 0xFF	; 255

00001348 <__divmodsi4_exit>:
    1348:	08 95       	ret

0000134a <__divmodsi4_neg1>:
    134a:	f6 f7       	brtc	.-4      	; 0x1348 <__divmodsi4_exit>
    134c:	90 95       	com	r25
    134e:	80 95       	com	r24
    1350:	70 95       	com	r23
    1352:	61 95       	neg	r22
    1354:	7f 4f       	sbci	r23, 0xFF	; 255
    1356:	8f 4f       	sbci	r24, 0xFF	; 255
    1358:	9f 4f       	sbci	r25, 0xFF	; 255
    135a:	08 95       	ret

0000135c <__udivmodsi4>:
    135c:	a1 e2       	ldi	r26, 0x21	; 33
    135e:	1a 2e       	mov	r1, r26
    1360:	aa 1b       	sub	r26, r26
    1362:	bb 1b       	sub	r27, r27
    1364:	fd 01       	movw	r30, r26
    1366:	0d c0       	rjmp	.+26     	; 0x1382 <__udivmodsi4_ep>

00001368 <__udivmodsi4_loop>:
    1368:	aa 1f       	adc	r26, r26
    136a:	bb 1f       	adc	r27, r27
    136c:	ee 1f       	adc	r30, r30
    136e:	ff 1f       	adc	r31, r31
    1370:	a2 17       	cp	r26, r18
    1372:	b3 07       	cpc	r27, r19
    1374:	e4 07       	cpc	r30, r20
    1376:	f5 07       	cpc	r31, r21
    1378:	20 f0       	brcs	.+8      	; 0x1382 <__udivmodsi4_ep>
    137a:	a2 1b       	sub	r26, r18
    137c:	b3 0b       	sbc	r27, r19
    137e:	e4 0b       	sbc	r30, r20
    1380:	f5 0b       	sbc	r31, r21

00001382 <__udivmodsi4_ep>:
    1382:	66 1f       	adc	r22, r22
    1384:	77 1f       	adc	r23, r23
    1386:	88 1f       	adc	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	1a 94       	dec	r1
    138c:	69 f7       	brne	.-38     	; 0x1368 <__udivmodsi4_loop>
    138e:	60 95       	com	r22
    1390:	70 95       	com	r23
    1392:	80 95       	com	r24
    1394:	90 95       	com	r25
    1396:	9b 01       	movw	r18, r22
    1398:	ac 01       	movw	r20, r24
    139a:	bd 01       	movw	r22, r26
    139c:	cf 01       	movw	r24, r30
    139e:	08 95       	ret

000013a0 <__tablejump2__>:
    13a0:	ee 0f       	add	r30, r30
    13a2:	ff 1f       	adc	r31, r31

000013a4 <__tablejump__>:
    13a4:	05 90       	lpm	r0, Z+
    13a6:	f4 91       	lpm	r31, Z+
    13a8:	e0 2d       	mov	r30, r0
    13aa:	09 94       	ijmp

000013ac <__do_global_dtors>:
    13ac:	10 e0       	ldi	r17, 0x00	; 0
    13ae:	c2 e3       	ldi	r28, 0x32	; 50
    13b0:	d0 e0       	ldi	r29, 0x00	; 0
    13b2:	03 c0       	rjmp	.+6      	; 0x13ba <.do_global_dtors_start>

000013b4 <.do_global_dtors_loop>:
    13b4:	fe 01       	movw	r30, r28
    13b6:	f6 df       	rcall	.-20     	; 0x13a4 <__tablejump__>
    13b8:	22 96       	adiw	r28, 0x02	; 2

000013ba <.do_global_dtors_start>:
    13ba:	c4 33       	cpi	r28, 0x34	; 52
    13bc:	d1 07       	cpc	r29, r17
    13be:	d1 f7       	brne	.-12     	; 0x13b4 <.do_global_dtors_loop>
    13c0:	f8 94       	cli

000013c2 <__stop_program>:
    13c2:	ff cf       	rjmp	.-2      	; 0x13c2 <__stop_program>
